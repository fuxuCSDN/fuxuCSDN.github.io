<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Cat</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://9cat.top/"/>
  <updated>2018-07-24T05:07:39.760Z</updated>
  <id>http://9cat.top/</id>
  
  <author>
    <name>water</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>逆向基础：循环结构分析</title>
    <link href="http://9cat.top/2018/07/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
    <id>http://9cat.top/2018/07/24/逆向基础：循环结构分析/</id>
    <published>2018-07-24T03:24:43.000Z</published>
    <updated>2018-07-24T05:07:39.760Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>程序语言的控制结构不外乎分支与循环，学习完分支结构后自然要对循环结构的反汇编代码有个了解。C语言的循环结构有for循环、while循环、do循环和goto循环。这里介绍前3种循环方式。</p><h1 id="1-for循环结构"><a href="#1-for循环结构" class="headerlink" title="1.for循环结构"></a>1.for循环结构</h1><p>for循环也可以称为步进循环，它的特点是用于已经明确循环范围。看下面一个简单的C语言代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nNum = <span class="number">0</span>,nSum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (nNum = <span class="number">1</span>; nNum &lt;= <span class="number">100</span>; nNum ++)</span><br><span class="line">&#123;</span><br><span class="line">nSum +=nNum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"nSum = %d \r\n"</span>,nSum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是一个经典的求1至100的累加求和的程序。通过这个程序来认识for循环结构的反汇编代码。<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00401028</span>                 <span class="keyword">mov</span>     [ebp+var_4], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040102</span>F                 <span class="keyword">mov</span>     [ebp+var_8], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401036</span>                 <span class="keyword">mov</span>     [ebp+var_4], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040103</span>D                 <span class="keyword">jmp</span>     short loc_401048</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040103</span>F <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040103</span>F</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040103</span>F loc_40103F:                             <span class="comment">; CODE XREF: _main+47j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040103</span>F                 <span class="keyword">mov</span>     eax, [ebp+var_4]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401042</span>                 <span class="keyword">add</span>     eax, <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401045</span>                 <span class="keyword">mov</span>     [ebp+var_4], eax</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401048</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401048</span> loc_401048:                             <span class="comment">; CODE XREF: _main+2Dj</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401048</span>                 cmp     [ebp+var_4], <span class="number">64</span>h</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040104</span>C                 jg      short loc_401059</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040104</span>E                 <span class="keyword">mov</span>     ecx, [ebp+var_8]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401051</span>                 <span class="keyword">add</span>     ecx, [ebp+var_4]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401054</span>                 <span class="keyword">mov</span>     [ebp+var_8], ecx</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401057</span>                 <span class="keyword">jmp</span>     short loc_40103F</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401059</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401059</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401059</span> loc_401059:                             <span class="comment">; CODE XREF: _main+3Cj</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401059</span>                 <span class="keyword">mov</span>     edx, [ebp+var_8]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040105</span>C                 <span class="keyword">push</span>    edx</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040105</span>D                 <span class="keyword">push</span>    offset Format   <span class="comment">; "nSum = %d \r\n"</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401062</span>                 <span class="keyword">call</span>    _printf</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401067</span>                 <span class="keyword">add</span>     esp, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040106</span>A                 xor     eax, eax</span><br></pre></td></tr></table></figure></div></div><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00401028</span>                 <span class="keyword">mov</span>     [ebp+nNum], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040102</span>F                 <span class="keyword">mov</span>     [ebp+nSum], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401036</span>                 <span class="keyword">mov</span>     [ebp+nNum], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040103</span>D                 <span class="keyword">jmp</span>     short LOC_CMP</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040103</span>F <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040103</span>F</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040103</span>F LOC_STEP:                               <span class="comment">; CODE XREF: _main+47j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040103</span>F                 <span class="keyword">mov</span>     eax, [ebp+nNum]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401042</span>                 <span class="keyword">add</span>     eax, <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401045</span>                 <span class="keyword">mov</span>     [ebp+nNum], eax</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401048</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401048</span> LOC_CMP:                                <span class="comment">; CODE XREF: _main+2Dj</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401048</span>                 cmp     [ebp+nNum], <span class="number">64</span>h</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040104</span>C                 jg      short LOC_ENDFOR</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040104</span>E                 <span class="keyword">mov</span>     ecx, [ebp+nSum]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401051</span>                 <span class="keyword">add</span>     ecx, [ebp+nNum]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401054</span>                 <span class="keyword">mov</span>     [ebp+nSum], ecx</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401057</span>                 <span class="keyword">jmp</span>     short LOC_STEP</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401059</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401059</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401059</span> LOC_ENDFOR:                             <span class="comment">; CODE XREF: _main+3Cj</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401059</span>                 <span class="keyword">mov</span>     edx, [ebp+nSum]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040105</span>C                 <span class="keyword">push</span>    edx</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040105</span>D                 <span class="keyword">push</span>    offset Format   <span class="comment">; "nSum = %d \r\n"</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401062</span>                 <span class="keyword">call</span>    _printf</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401067</span>                 <span class="keyword">add</span>     esp, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0040106</span>A                 xor     eax, eax</span><br></pre></td></tr></table></figure></p><p>这次的反汇编代码，我修改了其中的变量、标号，看起来更加直观。for结构可以分为3个部分，在LOC_STEP上面的部分是<code>初始化部分</code>，在LOC_STEP下面的部分是修改循环变量的部分，在LOC_CMP下面和LOC_ENDFOR上面部分是比较循环条件和循环体的部分。<br>for循环的反汇编结构如下：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">;初始化循环变量</span></span><br><span class="line">   <span class="keyword">jmp </span>LOC_CMP</span><br><span class="line"><span class="symbol">LOC_STEP:</span></span><br><span class="line">   <span class="comment">;修改循环变量</span></span><br><span class="line"><span class="symbol">LOC_CMP:</span></span><br><span class="line">   <span class="comment">;循环变量的判断</span></span><br><span class="line">   <span class="keyword">jxx </span>LOC_ENDFOR</span><br><span class="line">   <span class="comment">;循环体</span></span><br><span class="line">   <span class="keyword">jmp </span>LOC_STEP</span><br><span class="line"><span class="symbol">LOC_ENDFOR:</span></span><br></pre></td></tr></table></figure></p><p>再用IDA来看下生成的流程结构图，如下图所示：<br><img src="1.png" alt=""></p><h1 id="2-do…while循环结构"><a href="#2-do…while循环结构" class="headerlink" title="2.do…while循环结构"></a>2.do…while循环结构</h1><p>do循环体总是会被执行一次，这是do循环和while循环的区别。这里还是1至100的累加和代码，来看一下它的反汇编形式。先看C语言代码，如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nNum = <span class="number">1</span>,nSum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">nSum += nNum;</span><br><span class="line">nNum ++;</span><br><span class="line">&#125;<span class="keyword">while</span> (nNum &lt;= <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"nSum = %d \r\n"</span>,nSum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>do循环的结构要比for循环简单很多，反汇编代码也少很多。先看一下IDA生成的流程图，如下图所示：<br><img src="2.png" alt=""><br>反汇编代码如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00401028</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_4], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>0040102F                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401036</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401036</span> LOC_DO:                                 <span class="comment">; CODE XREF: _main+3Cj</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401036</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401039</span>                 <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_4]</span><br><span class="line"><span class="symbol">.text:</span>0040103C                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0040103F                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_4]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401042</span>                 <span class="keyword">add</span>     <span class="built_in">ecx</span>, <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401045</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_4], <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401048</span>                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_4], <span class="number">64h</span></span><br><span class="line"><span class="symbol">.text:</span>0040104C                 <span class="keyword">jle</span>     short LOC_DO</span><br><span class="line"><span class="symbol">.text:</span>0040104E                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, [<span class="built_in">ebp</span>+var_8]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401051</span>                 <span class="keyword">push</span>    <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401052</span>                 <span class="keyword">push</span>    offset Format   <span class="comment">; "nSum = %d \r\n"</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401057</span>                 <span class="keyword">call</span>    _printf</span><br><span class="line"><span class="symbol">.text:</span>0040105C                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>0040105F                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br></pre></td></tr></table></figure></p><p>do循环的主体就在LOC_DO和0040104C的jie之间。其结构调整如下：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;初始化循环变量</span></span><br><span class="line"><span class="symbol">LOC_DO:</span></span><br><span class="line"><span class="comment">;执行循环体</span></span><br><span class="line"><span class="comment">;修改循环体</span></span><br><span class="line"><span class="comment">;循环体变量的比较</span></span><br><span class="line"><span class="keyword">Jxx </span>LOC_DO</span><br></pre></td></tr></table></figure></p><h1 id="3-while循环结构"><a href="#3-while循环结构" class="headerlink" title="3.while循环结构"></a>3.while循环结构</h1><p>while循环与do循环的区别在于，在进入循环体之前需要先进行一次条件判断，循环体有可能因为循环条件的不成立而一次也不执行。1至100累加求和的while循环代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nNum = <span class="number">1</span>,nSum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (nNum &lt;= <span class="number">100</span> )</span><br><span class="line">&#123;</span><br><span class="line">nSum +=nNum;</span><br><span class="line">nNum ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"nSum = %d \r\n"</span>,nSum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再来看下它的反汇编代码，while循环比do循环多了一个条件的判断，因此会多一条分支。反汇编代码如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00401028</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+nNum], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>0040102F                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+nSum], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401036</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401036</span> LOC_WHILE:                              <span class="comment">; CODE XREF: _main+3Ej</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401036</span>                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+nNum], <span class="number">64h</span></span><br><span class="line"><span class="symbol">.text:</span>0040103A                 <span class="keyword">jg</span>      short LOC_WHILEEND</span><br><span class="line"><span class="symbol">.text:</span>0040103C                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+nSum]</span><br><span class="line"><span class="symbol">.text:</span>0040103F                 <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+nNum]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401042</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+nSum], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401045</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+nNum]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401048</span>                 <span class="keyword">add</span>     <span class="built_in">ecx</span>, <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>0040104B                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+nNum], <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>0040104E                 <span class="keyword">jmp</span>     short LOC_WHILE</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401050</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401050</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401050</span> LOC_WHILEEND:                           <span class="comment">; CODE XREF: _main+2Aj</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401050</span>                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, [<span class="built_in">ebp</span>+nSum]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401053</span>                 <span class="keyword">push</span>    <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401054</span>                 <span class="keyword">push</span>    offset Format   <span class="comment">; "nSum = %d \r\n"</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401059</span>                 <span class="keyword">call</span>    _printf</span><br><span class="line"><span class="symbol">.text:</span>0040105E                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00401061</span>                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br></pre></td></tr></table></figure></p><p>while循环的主要部分全部在LOC_WHILE和LOC_WHILEEND之间。在LOC_WHILE下面的两句cmp和jxx指令，在LOC_WHILEEND上面是jmp指令。这两部分是固定的格式；其结构整理如下：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;初始化循环变量等</span></span><br><span class="line"><span class="symbol">LOC_WHILE:</span></span><br><span class="line">cmp xxx, xxx</span><br><span class="line"><span class="keyword">jxx </span>LOC_WHILEEND</span><br><span class="line"><span class="comment">;循环体</span></span><br><span class="line"><span class="keyword">jmp </span>LOC_WHILE</span><br><span class="line"><span class="symbol">LOC_WHILEEND:</span></span><br></pre></td></tr></table></figure></p><p>再来看下IDA生成的流程图，如下图所示：<br><img src="3.png" alt=""><br>对于for循环、do循环和while循环这3种循环而言，do循环的效率显然更高，而while循环相对来说比for循环效率更高些。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>逆向基础：switch结构分析</title>
    <link href="http://9cat.top/2018/07/23/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%EF%BC%9Aswitch%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
    <id>http://9cat.top/2018/07/23/逆向基础：switch结构分析/</id>
    <published>2018-07-23T06:12:33.000Z</published>
    <updated>2018-07-23T14:06:45.834Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前面讲解了<a href="https://9cat.top/2018/07/23/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%EF%BC%9Aif-else%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/#more" title="文章链接">if…else…的分支结构</a>，接下来介绍switch…case…default的分支结构。switch分支结构是一种比较灵活的结构，它的反汇编代码可以生成多种形式，这里只介绍它的其中一种形式。</p><h1 id="1-switch分支结构例子程序"><a href="#1-switch分支结构例子程序" class="headerlink" title="1.switch分支结构例子程序"></a>1.switch分支结构例子程序</h1><p>先写例子代码，再对例子代码进行介绍。例子代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nNum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nNum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (nNum)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1 \r\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2 \r\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3 \r\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"4 \r\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"default \r\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="2-逆向反汇编解析"><a href="#2-逆向反汇编解析" class="headerlink" title="2.逆向反汇编解析"></a>2.逆向反汇编解析</h1><p>反汇编代码分两部分来看，一部分是default分支，另一部分是case分支。先看IDA生成的流程结构图，如下图所示：<br><img src="1.png" alt=""><br>在上图中可以看到2个大的分支，在左边的分支中又有4个小的分支。在整体结构上来看，不同于C语言的代码形式。其实右边的部分是case部分，右边的部分是default部分。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;<span class="selector-tag">var_4</span>相当于<span class="selector-tag">nNum</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D768</span>                 <span class="selector-tag">mov</span>     <span class="selector-attr">[ebp+var_4]</span>, 0   </span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D76F</span>                 <span class="selector-tag">lea</span>     <span class="selector-tag">eax</span>, <span class="selector-attr">[ebp+var_4]</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D772</span>                 <span class="selector-tag">push</span>    <span class="selector-tag">eax</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D773</span>                 <span class="selector-tag">push</span>    <span class="selector-tag">offset</span> <span class="selector-tag">aD</span>       ; "%<span class="selector-tag">d</span>"</span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D778</span>                 <span class="selector-tag">call</span>    _<span class="selector-tag">scanf</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D77D</span>                 <span class="selector-tag">add</span>     <span class="selector-tag">esp</span>, 8</span><br></pre></td></tr></table></figure><p>scanf()函数是C语言标准输入函数，第1个参数为<code>格式化字符串</code>，第2个参数是<code>接收数据的地址</code>。在0040D76F地址处，代码lea eax, [ebp+var_4]将nNum变量的地址送入eax寄存器。经过scanf()函数调用，var_4（相当于nNum）接收了用户的输入。<br>通过scanf()函数接收到用户的输入后，就进入switch()分支的部分，至少在C语言代码中是这样的。下面看一下反汇编代码得到情况：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D780</span>                 <span class="selector-tag">mov</span>     <span class="selector-tag">ecx</span>, <span class="selector-attr">[ebp+var_4]</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D783</span>                 <span class="selector-tag">mov</span>     <span class="selector-attr">[ebp+var_8]</span>, <span class="selector-tag">ecx</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D786</span>                 <span class="selector-tag">mov</span>     <span class="selector-tag">edx</span>, <span class="selector-attr">[ebp+var_8]</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D789</span>                 <span class="selector-tag">sub</span>     <span class="selector-tag">edx</span>, 1</span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D78C</span>                 <span class="selector-tag">mov</span>     <span class="selector-attr">[ebp+var_8]</span>, <span class="selector-tag">edx</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D78F</span>                 <span class="selector-tag">cmp</span>     <span class="selector-attr">[ebp+var_8]</span>, 3  ; <span class="selector-tag">switch</span> 4 <span class="selector-tag">cases</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D793</span>                 <span class="selector-tag">ja</span>      <span class="selector-tag">short</span> <span class="selector-tag">loc_40D7DB</span> ; <span class="selector-tag">jumptable</span> 0040<span class="selector-tag">D798</span> <span class="selector-tag">default</span> <span class="selector-tag">case</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D795</span>                 <span class="selector-tag">mov</span>     <span class="selector-tag">eax</span>, <span class="selector-attr">[ebp+var_8]</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D798</span>                 <span class="selector-tag">jmp</span>     <span class="selector-tag">ds</span><span class="selector-pseudo">:off_40D7FB</span><span class="selector-attr">[eax*4]</span> ; <span class="selector-tag">switch</span> <span class="selector-tag">jump</span></span><br></pre></td></tr></table></figure></p><p><code>0040D780</code>地址处的代码是mov ecx, [ebp+var_4]，也就是把nNum的值赋给了ecx寄存器。接着<code>0040D783</code>地址处的代码是mov     [ebp+var_8], ecx，这句将ecx的值又赋给了var_8这个变量。但是，在C语言代码中只定义了一个变量，而var_8是怎么来的？var_8是编译器产生的一个临时变量，用来保存一些数据。接着在<code>0040D786</code>地址处的代码又将var_8的值赋给了edx寄存器。然后<code>0040D789</code>和<code>0040D78C</code>地址处的代码将edx的值减1后又赋给了var_8变量。<br>这部分反汇编代码在C语言中是没有对应关系的。但是这部分代码的用处是什么呢？接着往下看<code>0040D78F</code>地址处是一条cmp     [ebp+var_8], 3反汇编代码。比较后，如果var_8大于3的话，那么<code>0040D793</code>地址处的无符号条件跳转指令ja将会进行跳转，去执行default部分的代码。<code>0040D78F</code>地址处为什么会和3进行比较呢？case分支的范围是1~4，而var_8在和3比较之前进行了减1的操作。如果var_8的值的范围在1~4之间，减1后的范围就变成了0~3之间。如果var_8的值小于等于3，则说明switch要执行case中的部分；如果是其他值的话，则要执行default流程。上面流程图被分为两部分就是这里的比较所引起的。<br>注：为什么判断时只判断是否大于3呢？小于等于3不一定意味着0~3的范围吧？也可能存在负数的情况。这样的质疑是对的，但是在条件分支处使用的条件跳转指令是“ja”，它是一个无符号的条件跳转指令，即使存在负数也会被当正数进行解析。<br>通过上面的分析可以发现，switch分支对于定位是执行case分支还是default分支的方法很高效。如果是执行default分支，那么只需要比较一次即可直接执行。<br>C语言中，switch语句有4个case部分，是不是应该比较4次呢？由于C语言代码中的case项是一个连续的序列，因此编译器又对代码做了优化。0040D795和0040D798地址处的两句代码即可准确找到要执行的case分支。再来看一下这两个地址处的反汇编代码，如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D795</span>                 <span class="selector-tag">mov</span>     <span class="selector-tag">eax</span>, <span class="selector-attr">[ebp+var_8]</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040D798</span>                 <span class="selector-tag">jmp</span>     <span class="selector-tag">ds</span><span class="selector-pseudo">:off_40D7FB</span><span class="selector-attr">[eax*4]</span> ; <span class="selector-tag">switch</span> <span class="selector-tag">jump</span></span><br></pre></td></tr></table></figure></p><p>0040D795地址处的代码将var_8的值传递给了eax寄存器，由于前面的代码没有发生跳转，那么var_8的取值范围必定在0~3之间。0040D798地址处的跳转很奇怪，像一个数组（其实就是一个数组），数组的下表由eax寄存器进行寻址。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="逆向基础" scheme="http://9cat.top/categories/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="C语言" scheme="http://9cat.top/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="VC6" scheme="http://9cat.top/tags/VC6/"/>
    
      <category term="IDA" scheme="http://9cat.top/tags/IDA/"/>
    
  </entry>
  
  <entry>
    <title>逆向基础：if else结构分析</title>
    <link href="http://9cat.top/2018/07/23/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%EF%BC%9Aif-else%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
    <id>http://9cat.top/2018/07/23/逆向基础：if-else结构分析/</id>
    <published>2018-07-23T01:53:37.000Z</published>
    <updated>2018-07-23T13:48:41.936Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-if…else…分支结构例子程序"><a href="#1-if…else…分支结构例子程序" class="headerlink" title="1.if…else…分支结构例子程序"></a>1.if…else…分支结构例子程序</h1><p>首先来写一个简单的C语言代码例子，然后对例子代码进行介绍。例子代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">1</span>,c=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a&gt;b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d \r\n"</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b &lt;= c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d \r\n"</span>,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d \r\n"</span>,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="2-逆向分析解析"><a href="#2-逆向分析解析" class="headerlink" title="2.逆向分析解析"></a>2.逆向分析解析</h1><p>上述代码非常短且很简单，用IDA看其反汇编代码。固定模式的头部和尾部省略不看，主要看其关键的反汇编代码，如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401028</span>                 <span class="selector-tag">mov</span>     <span class="selector-attr">[ebp+var_4]</span>, 0</span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040102F</span>                 <span class="selector-tag">mov</span>     <span class="selector-attr">[ebp+var_8]</span>, 1</span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401036</span>                 <span class="selector-tag">mov</span>     <span class="selector-attr">[ebp+var_C]</span>, 2</span><br></pre></td></tr></table></figure></p><p>以上3行反汇编代码是<code>对定义的变量的初始化</code>，在IDA中可以通过快捷键将其命名。将以上3个变量重命名后，看其余的反汇编代码，如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040103D</span>                 <span class="selector-tag">mov</span>     <span class="selector-tag">eax</span>, <span class="selector-attr">[ebp+var_4]</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401040</span>                 <span class="selector-tag">cmp</span>     <span class="selector-tag">eax</span>, <span class="selector-attr">[ebp+var_8]</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401043</span>                 <span class="selector-tag">jle</span>     <span class="selector-tag">short</span> <span class="selector-tag">loc_401058</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401045</span>                 <span class="selector-tag">mov</span>     <span class="selector-tag">ecx</span>, <span class="selector-attr">[ebp+var_4]</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401048</span>                 <span class="selector-tag">push</span>    <span class="selector-tag">ecx</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401049</span>                 <span class="selector-tag">push</span>    <span class="selector-tag">offset</span> <span class="selector-tag">Format</span>   ; "%<span class="selector-tag">d</span> \<span class="selector-tag">r</span>\<span class="selector-tag">n</span>"</span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040104E</span>                 <span class="selector-tag">call</span>    _<span class="selector-tag">printf</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401053</span>                 <span class="selector-tag">add</span>     <span class="selector-tag">esp</span>, 8</span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401056</span>                 <span class="selector-tag">jmp</span>     <span class="selector-tag">short</span> <span class="selector-tag">loc_401084</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401058</span> ; <span class="selector-tag">---------------------------------------------------------------------------</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401058</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401058</span> <span class="selector-tag">loc_401058</span>:                             ; <span class="selector-tag">CODE</span> <span class="selector-tag">XREF</span>: _<span class="selector-tag">main</span>+33<span class="selector-tag">j</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401058</span>                 <span class="selector-tag">mov</span>     <span class="selector-tag">edx</span>, <span class="selector-attr">[ebp+var_8]</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040105B</span>                 <span class="selector-tag">cmp</span>     <span class="selector-tag">edx</span>, <span class="selector-attr">[ebp+var_C]</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040105E</span>                 <span class="selector-tag">jg</span>      <span class="selector-tag">short</span> <span class="selector-tag">loc_401073</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401060</span>                 <span class="selector-tag">mov</span>     <span class="selector-tag">eax</span>, <span class="selector-attr">[ebp+var_8]</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401063</span>                 <span class="selector-tag">push</span>    <span class="selector-tag">eax</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401064</span>                 <span class="selector-tag">push</span>    <span class="selector-tag">offset</span> <span class="selector-tag">Format</span>   ; "%<span class="selector-tag">d</span> \<span class="selector-tag">r</span>\<span class="selector-tag">n</span>"</span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401069</span>                 <span class="selector-tag">call</span>    _<span class="selector-tag">printf</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040106E</span>                 <span class="selector-tag">add</span>     <span class="selector-tag">esp</span>, 8</span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401071</span>                 <span class="selector-tag">jmp</span>     <span class="selector-tag">short</span> <span class="selector-tag">loc_401084</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401073</span> ; <span class="selector-tag">---------------------------------------------------------------------------</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401073</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401073</span> <span class="selector-tag">loc_401073</span>:                             ; <span class="selector-tag">CODE</span> <span class="selector-tag">XREF</span>: _<span class="selector-tag">main</span>+4<span class="selector-tag">E</span><span class="selector-tag">j</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401073</span>                 <span class="selector-tag">mov</span>     <span class="selector-tag">ecx</span>, <span class="selector-attr">[ebp+var_C]</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401076</span>                 <span class="selector-tag">push</span>    <span class="selector-tag">ecx</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401077</span>                 <span class="selector-tag">push</span>    <span class="selector-tag">offset</span> <span class="selector-tag">Format</span>   ; "%<span class="selector-tag">d</span> \<span class="selector-tag">r</span>\<span class="selector-tag">n</span>"</span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:0040107C</span>                 <span class="selector-tag">call</span>    _<span class="selector-tag">printf</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401081</span>                 <span class="selector-tag">add</span>     <span class="selector-tag">esp</span>, 8</span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401084</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401084</span> <span class="selector-tag">loc_401084</span>:                             ; <span class="selector-tag">CODE</span> <span class="selector-tag">XREF</span>: _<span class="selector-tag">main</span>+46<span class="selector-tag">j</span></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:00401084</span>                                         ; _<span class="selector-tag">main</span>+61<span class="selector-tag">j</span></span><br></pre></td></tr></table></figure></p><p>将以上反汇编分为3段进行观察，第1段的地址范围是0040103D至00401056，第2段的地址范围是00401058至00401071，第3段的地址范围是00401073至00401081.除了第3段代码外，前面两段的代码有一个共同的特征：<code>cmp/jxx/printf/jmp</code>。这部分功能的特征就是if…else的特征所在。看一下IDA绘制的该段反汇编代码的反汇编流程结构，如下图所示：<br><img src="1.png" alt=""><br>在C语言代码中，影响程序流程的是两个关键的比较，分别是“&gt;”和“&lt;=”。在反汇编代码中，影响主要流程的是两个条件跳转指令，分别是“jle”和“jg”。在C语言代码中，“&gt;”（大于号）在反汇编中对应的是“jle”（小于等于则跳转），“&lt;=”（小于等于号）在反汇编中对应的是“jg”（大于则跳转）。<br>注意观察00401043和0040105E这两个地址，jxx指令会跳过紧接其后的指令部分，而跳转的目的地址上面都有一条<code>jmp无条件跳转指令</code>。也就是说，jxx和jmp之间的部分是C语言代码中比较表达式成功后执行的代码。在反汇编代码中，如果<code>条件跳转指令</code>没有发生跳转后，执行完相应的指令后<code>会执行jmp指令跳到某个地址</code>。注意观察，两条jmp指令跳转的目的地址都是0040084。</p><h1 id="3-if…else…结构小结"><a href="#3-if…else…结构小结" class="headerlink" title="3.if…else…结构小结"></a>3.if…else…结构小结</h1><p>从例子中可以找出C语言if…else…结构与反汇编代码的对应结构，如下：<br>        ;初始化变量<br>        mov xxx, xxx<br>        mov xxx, xxx<br>        ;比较跳转<br>        cmp xxx, xxx<br>        jxx _else if<br>        ;一系列处理指令<br>        ……<br>        jmp _if_else 结束位置</p><pre><code>_else_if:mov xxx, xxx;比较跳转cmp xxx, xxxjxx _else;一系列处理治理......jmp _if_else结束位置_else:;一系列处理指令......_if_else 结束位置：</code></pre><p>以上就是if…else分支结构的大体形式。</p><p>下接：<a href="https://9cat.top/2018/07/23/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%EF%BC%9Aswitch%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/#more" title="文章链接">switch结构分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="逆向基础" scheme="http://9cat.top/categories/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="C语言" scheme="http://9cat.top/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="VC6" scheme="http://9cat.top/tags/VC6/"/>
    
      <category term="IDA" scheme="http://9cat.top/tags/IDA/"/>
    
  </entry>
  
  <entry>
    <title>CCTYPE函数系列</title>
    <link href="http://9cat.top/2018/07/19/CCTYPE%E5%87%BD%E6%95%B0%E7%B3%BB%E5%88%97/"/>
    <id>http://9cat.top/2018/07/19/CCTYPE函数系列/</id>
    <published>2018-07-19T01:10:17.000Z</published>
    <updated>2018-07-19T02:24:13.518Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>C++中应该是#include <cctype><br>c中应该是#include &lt;ctype.h&gt;<br>以下为字符库中常用的函数</cctype></p><table><thead><tr><th style="text-align:left">函数名称</th><th style="text-align:left">返回值</th></tr></thead><tbody><tr><td style="text-align:left">isalnum()</td><td style="text-align:left">如果参数是字母数字，即字母或数字，该函数返回true</td></tr><tr><td style="text-align:left">isalpha()</td><td style="text-align:left">如果参数是字母，该函数返回真</td></tr><tr><td style="text-align:left">isblank()</td><td style="text-align:left">如果参数是空格或水平制表符，该函数返回true</td></tr><tr><td style="text-align:left">iscntrl()</td><td style="text-align:left">如果参数是控制字符，该函数返回true</td></tr><tr><td style="text-align:left">isdigit()</td><td style="text-align:left">如果参数是数字（0～9），该函数返回true</td></tr><tr><td style="text-align:left">isgraph()</td><td style="text-align:left">如果参数是除空格之外的打印字符，该函数返回true</td></tr><tr><td style="text-align:left">islower()</td><td style="text-align:left">如果参数是小写字母，该函数返回true</td></tr><tr><td style="text-align:left">isprint()</td><td style="text-align:left">如果参数是打印字符（包括空格），该函数返回true</td></tr><tr><td style="text-align:left">ispunct()</td><td style="text-align:left">如果参数是标点符号，该函数返回true</td></tr><tr><td style="text-align:left">isspace()</td><td style="text-align:left">如果参数是标准空白字符，如空格、进纸、换行符、回车、水平制表符或者垂直制表符，该函数返回true</td></tr><tr><td style="text-align:left">isupper()</td><td style="text-align:left">如果参数是大写字母，该函数返回true</td></tr><tr><td style="text-align:left">isxdigit()</td><td style="text-align:left">如果参数是十六进制的数字，即0～9、a~f、A~F，该函数返回true</td></tr><tr><td style="text-align:left">tolower()</td><td style="text-align:left">如果参数是大写字符，则返回其小写，否则返回该参数</td></tr><tr><td style="text-align:left">toupper()</td><td style="text-align:left">如果参数是小写字母，则返回其大写，否则返回该参数</td></tr></tbody></table><h3 id="常用的有："><a href="#常用的有：" class="headerlink" title="常用的有："></a>常用的有：</h3><p> tolower()————toupper()<br> isupper()————islower()<br> isalnum()————isalpha()</p><p>1.编写一个程序，读取键盘输入，直到遇到@符号为止，并回显输入（数字除外），同时将大写字母转换为小写，将小写字母转换为大写<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter: \n"</span>;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span>.get(ch);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(ch!=<span class="string">'@'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line"><span class="built_in">cin</span>.get(ch);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">islower</span>(ch))</span><br><span class="line">ch=<span class="built_in">toupper</span>(ch);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ch=<span class="built_in">tolower</span>(ch);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ch;</span><br><span class="line"><span class="built_in">cin</span>.get(ch);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="等价"><a href="#等价" class="headerlink" title="等价"></a>等价</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter: \n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>.get(ch) &amp;&amp; ch!=<span class="string">'@'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">islower</span>(ch))</span><br><span class="line">        &#123;</span><br><span class="line">            ch = <span class="built_in">toupper</span>(ch);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isupper</span>(ch))</span><br><span class="line">        &#123;</span><br><span class="line">            ch = <span class="built_in">tolower</span>(ch);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ch;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.编写一个程序，最多将10个donation值读入到一个double数组中。程序遇到非数字输入时将结束输入，并报告这些数字的平均值以及数组中多少个数字大于平均值。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> sum=<span class="number">0</span>,average=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> num[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,total=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">"Please enter: \n"</span>;</span><br><span class="line"><span class="keyword">double</span> temp;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;temp&amp;&amp;i&lt;<span class="number">9</span>&amp;&amp;!<span class="built_in">isdigit</span>(temp))</span><br><span class="line">    &#123;</span><br><span class="line">        num[i]=temp;</span><br><span class="line">        sum+=num[i];</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(i!=<span class="number">0</span>)</span><br><span class="line">        average=sum/i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;++j)</span><br><span class="line">        <span class="keyword">if</span>(num[j]&gt;average)</span><br><span class="line">        ++total;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"这些数字的平均值为："</span>&lt;&lt;average&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"并且共有"</span>&lt;&lt;total&lt;&lt;<span class="string">"个数字大于平均值。\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="cctype" scheme="http://9cat.top/tags/cctype/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记：I/O读操作</title>
    <link href="http://9cat.top/2018/07/18/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9AI-O%E8%AF%BB%E6%93%8D%E4%BD%9C/"/>
    <id>http://9cat.top/2018/07/18/学习笔记：I-O读操作/</id>
    <published>2018-07-18T07:20:52.000Z</published>
    <updated>2018-07-18T08:03:50.716Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>要运行下面的程序，首先得创建一个包含数字的文本文件。为此，可以用使用文本编辑器（如用于编写源代码的文本编辑器）。假设该文件为名scores.txt，包含的内容如下：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">18 </span><span class="number">19</span> <span class="number">18.5</span> <span class="number">13.5</span> <span class="number">14</span> </span><br><span class="line"><span class="symbol">16 </span><span class="number">19.5</span> <span class="number">20</span> <span class="number">18</span> <span class="number">12</span> <span class="number">18.5</span></span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">60</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> filename[SIZE];</span><br><span class="line">ifstream inFile;  <span class="comment">//object for handing file input</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Enter name of data file: "</span>;</span><br><span class="line">    <span class="built_in">cin</span>.getline(filename,SIZE);</span><br><span class="line">    inFile.open(filename);  <span class="comment">//associate inFile with a file</span></span><br><span class="line"><span class="keyword">if</span> (!inFile.is_open())  <span class="comment">//failed to open file</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Could not open the file "</span>&lt;&lt;filename &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Program terminating.\n"</span>;</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> value;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;           <span class="comment">//number of items read</span></span><br><span class="line">    inFile &gt;&gt; value;        <span class="comment">//get first value</span></span><br><span class="line">    <span class="keyword">while</span> (inFile.good())   <span class="comment">//whiel input good and not at EOF</span></span><br><span class="line">    &#123;</span><br><span class="line">        ++count;             <span class="comment">//one more item read</span></span><br><span class="line">        sum+=value;         <span class="comment">//calculate running total</span></span><br><span class="line">        inFile&gt;&gt;value;      <span class="comment">// get next value</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inFile.eof())</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"End of file reached.\n"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (inFile.fail())</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Input terminated by data mismatch.\n"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Input terminated for unknown reason.\n"</span>;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"No data processed.\n"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Intem read: "</span>&lt;&lt;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Sum: "</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Average: "</span>&lt;&lt;sum / count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inFile.close();  <span class="comment">//finished with the file</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="程序说明"><a href="#程序说明" class="headerlink" title="程序说明"></a>程序说明</h2><p>该程序没有使用硬编码文件名，而是将用户提供的文件名存储到字符数组filename中，然后该数组用作open()的参数：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inFile</span>.<span class="keyword">open</span>(fielname);</span><br></pre></td></tr></table></figure></p><p>检查文件是否被打开至关重要。下面是一些可能出问题的地方：指定的文件可能不存在；文件可能位于另一个目录（文件夹）中；访问可能拒绝；用户可能输错了文件名或省略了文件扩展名。很多初学者花了大量的时间检查文件读取循环的哪里出了问题后，最终却发现问题在于程序没有打开文件。检查文件是否被成功打开可避免这种精力放在错误地方的情况发生。<br>需要注意的是文件读取循环的正确设计。读取文件时，有几点需要检查。<br>首先，程序读取文件时不应超过EOF。如果最后一次读取数据时遇到EOF，方法eof()将返回true。<br>其次，程序可能遇到类型不匹配的情况。例如，下面程序期望文件中只包含数字。如果最后一次读取操作中发生了类型不匹配的情况，方法fail()将返回true（如果遇到EOF，该方法也将返回true）。<br>最后，可能出现意外的问题，如文件受损或硬件故障。如果最后一次读取文件时发生了这样的问题，方法bad()将返回true。不要分别检查这些情况，一种更简单的方法是使用good()方法，该方法在没有发生任何错误时返回true：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (inFile.good())//<span class="keyword">while</span> input good <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">at</span> EOF</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后，可以使用其他方法来确定循环终止的真正原因：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (inFile.eof())</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Enter of file reached.\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (inFiel.fail())</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Input terminated by data mismatch .\n"</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Input terminated for unknown reason.\n"</span>;</span><br></pre></td></tr></table></figure></p><p>这些代码紧跟在循环的后面，用于判断循环为何停止。由于eof()只能判断是否到达EOF，而fail()可用于检查EOF和类型不匹配，因此上述代码首先判断是否到达EOF。这样，如果执行到了else if 测试，便可排除EOF，因此，如果fail()返回true，便可断定导致循环终止的原因是<code>类型不匹配</code>。<br>方法good()指出最后一次读取输入的操作是否成功，这一点至关重要。这意味着应该在执行读取输入的操作后，立刻应用这种测试。为此，一种标方法是，在循环之前（首次执行循环前）放置一条输入语句，并在循环的末尾（下次执行循环测试之前）放置另一条输入语句：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// standard file-reading loop design</span></span><br><span class="line"><span class="keyword">inFile</span> &gt;&gt; value;<span class="comment">//get first value</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">inFile</span>.good())<span class="comment">//while input good and not at EOF</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//loop body goes here</span></span><br><span class="line"><span class="keyword">inFile</span> &gt;&gt; value; <span class="comment">//get next value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>鉴于以下事实，可以对上述代码进行精简：表达式inFile&gt;&gt;value的结果为inFiel，而在需要一个bool值的情况下，inFile的结果为inFile.good()，即true或false。<br>因此，可以将两条输入语句用<code>一条用作循环测试的输入语句</code>代替。也就是说，可以将上述循环结构替换为如下循环结构：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// abbreviated file-reading <span class="keyword">loop</span> design</span><br><span class="line">// omit pre-<span class="keyword">loop</span> input</span><br><span class="line"><span class="keyword">while</span> (inFiel &gt;&gt; value)       //read <span class="keyword">and</span> test <span class="keyword">for</span> success</span><br><span class="line">&#123;</span><br><span class="line">//<span class="keyword">loop</span> <span class="keyword">body</span> goes here </span><br><span class="line">// cmit <span class="keyword">end</span>-<span class="keyword">of</span>-<span class="keyword">loop</span> input</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种设计仍然遵循了在测试前进行读取的规则，因此要计算表达式inFile &gt;&gt; value的值，程序必须首先试图将一个数字读取到value中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://9cat.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="I/O" scheme="http://9cat.top/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记：I/O写操作</title>
    <link href="http://9cat.top/2018/07/18/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9AI-O%E5%86%99%E6%93%8D%E4%BD%9C/"/>
    <id>http://9cat.top/2018/07/18/学习笔记：I-O写操作/</id>
    <published>2018-07-18T06:26:08.000Z</published>
    <updated>2018-07-18T06:47:10.668Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如下程序中，声明一个ofstream对象后，便可以使用方法open()将该对象特定文件关联起来：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ofstream <span class="keyword">outFile</span>;</span><br><span class="line"><span class="keyword">outFile</span>.<span class="keyword">open</span>(<span class="string">"carinfo.txt"</span>);</span><br></pre></td></tr></table></figure></p><p>程序使用完该文件后，应该将其关闭：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">outFile</span>.<span class="keyword">close</span>();</span><br></pre></td></tr></table></figure></p><p>注意，方法close()<code>不需要使用文件名</code>作为参数，这是因为outFile已经同特定的文件关联起来。如果您忘记关闭文件，程序正常终止时将自动关闭它。<br>outFile可以使用cout可使用的任何方法。他不但能够使用运算符&lt;&lt;，还可以使用各种格式化方法，如setf()和precision()。这些方法只影响调用它们的对象。例如，不同的对象，可以提供不同的值：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cout.precision(2);//<span class="keyword">use</span> s <span class="keyword">precision</span> <span class="keyword">of</span> <span class="number">2</span> <span class="keyword">for</span> the display</span><br><span class="line">outFile.precision(<span class="number">4</span>);//<span class="keyword">use</span> a <span class="keyword">precision</span> <span class="keyword">of</span> <span class="number">4</span> <span class="keyword">for</span> <span class="keyword">file</span> <span class="keyword">output</span></span><br></pre></td></tr></table></figure></p><p>需要注意的重点是，创建好ofstream对象(如outFile)后，便可以像使用cout那样使用它。<br>回到open()方法：<br>    outFile.open(“carinfo.txt”);<br>在这里，程序运行之前，文件carinfo.txt并不存在。在这种情况下，方法open()将新建一个名为carinfo.txt的文件。如果在此运行该程序，文件carinfo.txt将生成，此情况将如何呢？默认情况下，open()将首先截断该文件，即将其长度截断到零————丢弃其原有的内容，然后将新的输出加到该文件中。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> automobile[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line"><span class="keyword">double</span> a_price;</span><br><span class="line"><span class="keyword">double</span> d_price;</span><br><span class="line"></span><br><span class="line">ofstream outFile;</span><br><span class="line">outFile.open(<span class="string">"carinfo.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Enter the make and model of automobile:"</span>;</span><br><span class="line"><span class="built_in">cin</span>.getline(automobile, <span class="number">50</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Enter the model year:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;year;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Enter the original asking price:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a_price;</span><br><span class="line">d_price = <span class="number">0.913</span> * a_price;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;fixed;</span><br><span class="line"><span class="built_in">cout</span>.precision(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">cout</span>.setf(ios_base::showpoint);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Make and model:"</span>&lt;&lt;automobile&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"year:"</span>&lt;&lt;year&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Now asking $"</span>&lt;&lt;d_price&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">outFile&lt;&lt;fixed;</span><br><span class="line">outFile.precision(<span class="number">2</span>);</span><br><span class="line">outFile.setf(ios_base::showpoint);</span><br><span class="line">outFile&lt;&lt;<span class="string">"Make and model:"</span>&lt;&lt;automobile&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">outFile&lt;&lt;<span class="string">"Year:"</span>&lt;&lt;year&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">outFile&lt;&lt;<span class="string">"Was asking $"</span>&lt;&lt;a_price&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">outFile&lt;&lt;<span class="string">"Now asking $"</span>&lt;&lt;d_price&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">outFile.close();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://9cat.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="I/O" scheme="http://9cat.top/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记：cin.get()</title>
    <link href="http://9cat.top/2018/07/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9Acin-get/"/>
    <id>http://9cat.top/2018/07/15/学习笔记：cin-get/</id>
    <published>2018-07-15T14:08:50.000Z</published>
    <updated>2018-07-15T14:09:59.811Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter character; enter # to quit:\n"</span>;</span><br><span class="line"><span class="built_in">cin</span>.get(ch);</span><br><span class="line"><span class="keyword">while</span> (ch!=<span class="string">'#'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ch;</span><br><span class="line">++count;</span><br><span class="line"><span class="built_in">cin</span>.get(ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">cout</span> &lt;&lt; <span class="string">"characters read\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://9cat.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>C-表白源码</title>
    <link href="http://9cat.top/2018/07/14/C-%E8%A1%A8%E7%99%BD%E6%BA%90%E7%A0%81/"/>
    <id>http://9cat.top/2018/07/14/C-表白源码/</id>
    <published>2018-07-14T09:34:22.000Z</published>
    <updated>2018-07-14T10:07:32.101Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>编译环境：VS2013及以上</p><p><img src="1.png" alt=""><br><a href="https://pan.baidu.com/s/1PQRVjOGJklKqmvq5I9uQ3g" target="_blank" rel="noopener">源码下载</a><br>密码：mqtd</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="C语言编程" scheme="http://9cat.top/categories/C%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="源码" scheme="http://9cat.top/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记：调用约定</title>
    <link href="http://9cat.top/2018/07/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/"/>
    <id>http://9cat.top/2018/07/13/学习笔记：调用约定/</id>
    <published>2018-07-13T11:26:40.000Z</published>
    <updated>2018-07-13T13:32:59.324Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-C调用约定"><a href="#1-C调用约定" class="headerlink" title="1.C调用约定"></a>1.C调用约定</h2><p>x86体系结构的许多C编译器使用默认调用约定叫做C调用约定。如果默认的调用约定被重写，则C/C++程序中常用的<code>_cdecl修饰符</code>会迫使编译器利用C调用约定。自现在开始，我们把这种调用约定叫做<code>cdecl调用约定</code>cdecl调用约定规定：调用方按<code>从右到左</code>的顺序将函数参数放入栈，在被调用的函数完成其操作时，调用方（而不是被调用方）负责从栈中清除参数。<br>从右到左在栈中放入参数的一个结果是，如果函数被调用，最左边的（第一个）参数将始终位于栈顶。这样，无论该函数需要多少个参数，我们都可以轻易找到用第一个参数。因此，cdecl调用约定非常适用于那些<code>参数数量可变</code>的函数（如printf）。<br>要求调用函数从栈中删除参数，意味着你将经常看到：指令在由<code>被调用的函数</code>返回后，会立刻对程序栈指针进行调整。如果函数能够接受数量可变的参数，则调用方非常适于进行这种调整，因为它清楚地知道，它向函数传递了多少个参数，因此能够轻松做出正确的调整。而被调用的函数无法提前知道自己会收到多少个参数，因此很难对栈做出必要的调整。<br>在下面的例子中，我们调用一个拥有以下原型的函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">demo_cdecl</span><span class="params">(<span class="keyword">int</span> w,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>;</span><br></pre></td></tr></table></figure></p><p>默认情况下，这个函数将使用cdecl调用约定，并希望你按<code>从右到左</code>的顺序压人4个参数，同时要求调用方清除栈中的参数。编译器可能会为这个函数的调用生成以下代码：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;demo_cdecl(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);   <span class="comment">//programmer calls demo_cdecl</span></span><br><span class="line">① push  <span class="number">4</span>;push <span class="keyword">parameter</span> z</span><br><span class="line">  push  <span class="comment">3</span>;push <span class="keyword">parameter</span> y</span><br><span class="line">  push  <span class="comment">2</span>;push <span class="keyword">parameter</span> x</span><br><span class="line">  push  <span class="comment">1</span>;push <span class="keyword">parameter</span> w</span><br><span class="line">  call  <span class="comment">demo_cdecl</span>;call the function</span><br><span class="line">② add   esp,<span class="number">16</span>;adjust esp to its former value</span><br></pre></td></tr></table></figure></p><p>从①开始的4个push操作使程序栈指针（ESP）发生16个字节（在32位体系结构上为 4*sizeof (int)）的变化，从demo_cdecl返回后，它们在②处被撤销。如果demo_cdecl被调用50次，那么，每次被调用之后，都会发生类似于②处的调整。下面的例子同样遵照cdecl调用约定，但是，每次调用demo_cdecl后，调用方不需要删除栈中的参数。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;demo_cdecl(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);    <span class="comment"> //programmer calls demo_cdecl</span></span><br><span class="line">  mov[esp+<span class="number">12</span>],<span class="number">4</span>;move parameter z <span class="built_in">to</span> <span class="keyword">fourth</span> position <span class="keyword">on</span> <span class="title">stack</span></span><br><span class="line">  mov[esp+<span class="number">8</span>], <span class="number">3</span>;move parameter y <span class="built_in">to</span> <span class="keyword">third</span> position <span class="keyword">on</span> <span class="title">stack</span></span><br><span class="line">  mov[esp+<span class="number">4</span>],<span class="number">2</span>;move parameter x <span class="built_in">to</span> <span class="keyword">second</span> position <span class="keyword">on</span> <span class="title">stack</span></span><br><span class="line">  mov[esp],<span class="number">1</span>;move parameter w <span class="built_in">to</span> top <span class="keyword">of</span> stack</span><br><span class="line">  calldemo_cdecl;call <span class="keyword">the</span> <span class="function"><span class="keyword">function</span></span></span><br></pre></td></tr></table></figure></p><p>在这个例子中，在函数的“序言”阶段，编译器已经在栈顶为demo_cdecl的参数预先分配了存储空间。在demo_cdecl结束后，也就不需要调整栈指针。GNU编译器（gcc和g++）正是利用这种技巧将函数放到栈上的。注意，无论采用哪一种方法，在调用函数时，栈指针都会指向<code>最左边</code>的参数。</p><h2 id="2-标准调用约定"><a href="#2-标准调用约定" class="headerlink" title="2.标准调用约定"></a>2.标准调用约定</h2><p>这里的“标准”似乎有些用词不当，因为它是微软自己的调用约定所起的名称。这种约定在函数声明时使用了修饰符_stdcall，如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _<span class="function">stdcall <span class="title">demo_stdcall</span><span class="params">(<span class="keyword">int</span> w,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br></pre></td></tr></table></figure></p><p>为避免“标准”一词引起混淆，在本书的剩余部分，我们将这种调用约定称为stdcall调用约定。<br>和cdecl调用约定一样，stdcall调用约定按<code>从右到左</code>的顺序将函数参数放在程序的栈上。使用stdcall调用约定的区别在于：<code>函数结束执行时，应由被调用的函数负责删除栈中的函数参数。</code>对被调用的函数而言，要完成这个任务，它必须清楚知道栈上有多少个参数，这只有在函数接受对的<code>参数数量固定不变时</code>才有可能。因此，printf这种接受数量可变的参数的函数不能使用stdcall调用约定。例如，demo_stdcall函数需要3个整数参数，在栈上共占用12个字节（在32位体系结构上为3*sizeof(int)）的空间。x86编译器能够使用RET指令的一种特殊形式，同时从栈顶提取返回地址，并给栈指针加上12，以消除函数参数。demo_stdcall可能会使用以下指令返回到调用方：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret <span class="number">12</span>; <span class="literal">return</span> <span class="keyword">and</span> claer <span class="number">12</span> <span class="keyword">bytes</span> <span class="built_in">from</span> <span class="keyword">the</span> stack</span><br></pre></td></tr></table></figure></p><p>使用stdcall的主要优点在于，每次函数调用之后，不需要通过代码从栈中清除参数，因而能生成体积稍小、速度较快的程序。根据惯例，微软对所有由共享库（DLL）文件输出的参数数量固定的函数使用stdcall约定。如果你正尝试为某个共享库组件生成函数原型或二进制兼容的替代者，请记住这一点。</p><h2 id="3-x86fastcall约定"><a href="#3-x86fastcall约定" class="headerlink" title="3.x86fastcall约定"></a>3.x86fastcall约定</h2><p>fastcall约定是stdcall约定的一个变体，它向CPU寄存器（而非程序栈）最多传递两个参数。Microsoft Visual C/C++ 和GNU gcc/g++（3.4及更低版本）编译器能够识别函数声明中的fastcall修饰符。如果指定使用fastcall约定，则传递给函数的前两个参数分别位于ECX和EDX寄存器中。剩余的其他参数则以类似于stdcall约定的方式从右到左放入栈上。同样与stdcall约定类似的是，在返回其调用方时，fastcall函数负责从栈中删除参数。下面的声明中即使用了fastcall修饰符：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> fastcall <span class="title">demo_fastcall</span> <span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span>;</span><br></pre></td></tr></table></figure></p><p>为调用demo_stdcall，编译器可能会生成以下代码：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">; demo_fastcall(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);     <span class="comment">//programmer calls demo_fastcall  </span></span><br><span class="line">  push<span class="number">4</span>; move <span class="keyword">parameter</span> z <span class="comment">to second position on stack</span></span><br><span class="line">  push<span class="comment">3</span>; move <span class="keyword">parameter</span> y <span class="comment">to top position on stack</span></span><br><span class="line">  mov   <span class="comment">edx, 2</span>; move <span class="keyword">parameter</span> x <span class="comment">to edx</span></span><br><span class="line">  mov<span class="comment">ecs, 1</span>; move <span class="keyword">parameter</span> w <span class="comment">to ecx</span> </span><br><span class="line">  call<span class="comment">demo_fastcall</span>; call the function</span><br></pre></td></tr></table></figure></p><p>注意，调用demo_fastcall返回后，<code>并不需要调整栈</code>，因为demo_fastcall负责在返回到调用方时从栈中清除参数y和z。由于有两个参数被传递到寄存器中，被调用的函数仅仅需要从栈中清除8个字节，即使该函数拥有4个参数，理解这一点很重要。</p><h2 id="4-C-调用约定"><a href="#4-C-调用约定" class="headerlink" title="4.C++调用约定"></a>4.C++调用约定</h2><p>C++类中的非静态成员函数与标准函数不同，它们需要使用this指针，该指针指向用于<code>调用函数的对象</code>。用于调用函数的对象的地址必须由<code>调用方</code>提供，因此，它在调用非静态成员函数时作为参数提供。C++语言标准并未规定应如何向非静态成员函数传递指针，因此，不同编译器使用不同的技巧来传递指针，这一点也不足为奇了。<br>Microsoft Visual C++提供thiscall调用约定，它将this指针传递给ECX寄存器中，并且和在stacall中一样，它要求非静态成员函数清除栈中的参数。GNU g++编译器将this看成是任何非静态成员函数的第一个隐含参数，而在所有其他方面与使用cdecl约定相同。因此，对使用g++编译的代码来说，在调用非静态成员函数之前，this被放置到扎拟定，且<code>调用方</code>负责在函数返回时删除栈中的参数（至少有一个参数）。</p><h2 id="5-其他调用约定"><a href="#5-其他调用约定" class="headerlink" title="5.其他调用约定"></a>5.其他调用约定</h2><p>要完整地介绍现有的每一个调用约定，可能需要写一本书。调用约定通常是特定于语言、编译器和CPU的。如果遇到由更为少见的编译器生成的代码，可能需要你自己进行一番研究。但是，以下这些情况需要特别注意：优化代码、定制汇编语言代码和系统调用。<br>如果输出函数（如库函数）是为了供其他程序使用，那么，它必须遵照主流的调用约定，以便程序员能够轻松调用。另一方面，如果函数仅供内部程序使用，则该函数需要采用只有函数的程序才了解的调用约定。在这类情况下，优化编译器会选择使用备用的调用约定，以生成运行速度更快的代码。这样的例子包括：在Microsoft Visual C++中使用/GL选项，以及在GNU gcc/g++中使用regparm关键字。<br>如果程序员不怕麻烦，使用汇编语言，那么，他们就能够完全控制如何向他们创建的函数传递参数。除非他们希望创建供其他程序员使用的函数，否则，汇编语言程序员能够以任何他们认为恰当的方式传递参数。因此，在分析自定义汇编代码时，请格外小心。在模糊程序（obfuscation routine）和shellcode中经常可以看到自定义汇编代码。<br>系统调用是一种特殊的函数调用，用于请求一项操作系统服务。通常，系统调用会造成状态转换，由用户模式进入内核模式，以便操作系统内核执行用户的请求。启动系统调用的方式因操作系统和CPU而异。例如，Linux x86系统调用使用int 0x80指令启动，而其他x86操作系统可能使用sysenter指令。在许多x86系统中（Linux是一个例外）上，系统调用的参数位于运行时栈上，并在启动系统调用之前，在EAX寄存器中放入一个系统调用编号。Linux系统调用接受位于特定寄存器中的参数，有时候，如果可用寄存器无法存储所有的参数，它也可以接受位于程序栈上的参数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://9cat.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>学习笔记：栈帧</title>
    <link href="http://9cat.top/2018/07/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%A0%88%E5%B8%A7/"/>
    <id>http://9cat.top/2018/07/13/学习笔记：栈帧/</id>
    <published>2018-07-13T08:25:41.000Z</published>
    <updated>2018-07-13T09:07:28.399Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>栈帧（stack frame）是这样一种低级概念。栈帧是在程序的运行时时栈中分配的内存块，专门用于特定的函数调用。程序员通常会将可执行语句分组，划分成叫做<code>函数（也称过程、子例程或方法）的单元</code>。有时候，这样做是按照所使用的语言的的要求。多数情况下，以这些函数单元为基础构建程序是一种良好的编程实践。<br>如果一个函数并未执行，通常它并不需要内存。但是，但函数被调用时，它就可能因为某种原因需要用到内存。这源于几个方面的原因。<br>其一，函数的调用方可能希望以参数的方式向该函数传递信息，这些参数需要存储在某个地方，以方便函数查找它们。<br>其二，在执行任务的过程中，函数可能需要临时放入存储空间。程序员通常会通过声明局部变量来分配这类临时空间，这些变量将在函数执行过程中使用，但一旦完成函数调用，就无法再访问。<br>编译器利用栈帧（也叫<code>激活记录</code>）对函数参数和局部变量进行分配和释放（整个过程对程序员透明）。将在控制权转交给函数之前，编译器会插入代码，将函数参数放入栈帧内，并分配足够的内存，以保存函数的局部变量。鉴于栈帧的结构，该函数的返回地址也存储子啊新的栈帧内。使用栈帧使得<code>递归</code>成为可能，因为每个递归函数调用都有他自己的栈帧，这恰好将当前调用与前一次调用分隔开来。下面是调用一个函数时的详细操作步骤。<br>（1）调用方将被<code>调用函数</code>所需的任何参数放入到该函数所采用的的<code>调用约定</code>指定的位置。如果参数被放到运行时栈上，该操作可能导致程序的栈指针发生改变。<br>（2）调用方将控制权转交给被调用的函数，这个过程由x86CALL或MIPS JAL等指令执行。然后，<code>返回地址</code>被保存到程序栈或CPU寄存器中。<br>（3）如有必要，被调用的函数会配置一个<code>栈指针</code>，并保存调用方希望保持不变的任何寄存器值。<br>（4）被调用的函数为它可能需要的<code>任何局部变量</code>分配内存空间。一般，通过调整程序栈指针在<code>运行时上保留空间</code>来完成这一任务。<br>（5）被调用的函数执行其操作，可能生成一个结果。在执行操作的过程中，被调用的函数可能会访问调用函数传递给它的参数。如果函数<code>返回一个结果</code>，此结果通常被放置到一个<code>特定的寄存器</code>中，或者放置到函数返回后调用方<code>可立即访问的寄存器</code>中。<br>（6）一旦函数完成其操作，任何为局部变量保存的栈空间<code>即被释放</code>。通常，逆向执行第（4）步中的操作，即可完成这个任务。<br>（7）如果某个寄存器的值还为调用方保存（第（3）步）着，那么将其恢复到原始值。这包括恢复调用方的栈指针寄存器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://9cat.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>比较char与string</title>
    <link href="http://9cat.top/2018/07/12/%E6%AF%94%E8%BE%83char%E4%B8%8Estring/"/>
    <id>http://9cat.top/2018/07/12/比较char与string/</id>
    <published>2018-07-12T13:12:59.000Z</published>
    <updated>2018-07-12T13:50:32.076Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用C-风格字符串中的strcmp()函数来比较。该函数接受两个字符串地址作为参数。这意味这参数可以是<code>指针</code>、<code>字符串常量</code>或<code>字符数组名</code>。如果两个字符串相同。该函数返回0,；如果第一个字符串按字母排序排在<code>第二个</code>字符之后，则strcpm()将返回一个<code>正数值</code>。实际上，“按系统排序顺序”比“按字母顺序”更准确。这意味着字符是根据字符的系统编码来进行比较的。例如，使用ASCII码时，所有大写字母的编码都比小写字母<code>小</code>，所以按排序顺序，大写字母将位于小写字母之前。因此，字符串“Zoo”在字符串“ariary”之前。根据编码进行比较还意味着大写字母和小写字母是不同的，因此字符串“FOO”和字符串“foo”不同。<br>在有些语言（入BASIC和标准Pascal）中，存储在不同长度的数组中的字符串彼此不相同。但是C-风格字符串是通过结尾的空值字符定义的，而不是由其所在数组的长度定义的。<code>这意味着两个字符串即使被存储在长度不同的数组中，也可能是相同的：</code><br>    char big[80] = “Daffy”;    //5 letters plus \0<br>    char little[6] = “Daffy”;  //5 letters plus \0<br>顺便一说，虽然不能用关系运算符来比较字符串，但却可以用来比较字符，因为字符实际上是整型。因此下面的代码可以用来显示字母表中的字符，至少对于ASCII字符集和Unicode字符集来说是有效的：<br>for(ch = ‘a’ ch &lt;+ ‘z’;ch++)<br>    cout &lt;&lt; ch;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> word[<span class="number">5</span>]=<span class="string">"?ate"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> ch = <span class="string">'a'</span>;<span class="built_in">strcmp</span>(word,<span class="string">"mate"</span>);ch++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; word &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">word[<span class="number">0</span>]=ch;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"After loop ends,word is "</span>&lt;&lt;word&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="检测相等或排列顺序："><a href="#检测相等或排列顺序：" class="headerlink" title="检测相等或排列顺序："></a>检测相等或排列顺序：</h2><p>可以使用strcmp()来测试C-风格字符串是否相等（排列顺序）。如果str1和str2相等，则下面的表达式为true：<br>strcmp(str1,str2) == 0<br>如果str1和str2不相等，则下面两个表达式都为true：<br>strcmp(str1,str2) != 0<br>strcmp(str1,str2)<br>如果str1在str2前面，则下面的表达式为true：<br>strcmp(str1,str2) &lt; 0<br>如果str1在str2后面，则下面的表达式为true：<br>strcmp(str1,str2) &gt; 0<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> word=<span class="string">"?ate"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> ch = <span class="string">'a'</span>;word!=<span class="string">"mate"</span>;ch++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; word &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">word[<span class="number">0</span>]=ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"After loop ends,word is "</span>&lt;&lt;word&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://9cat.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>学习笔记:C++primer.plus编程练习题答案</title>
    <link href="http://9cat.top/2018/07/10/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-C-primer-plus%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88/"/>
    <id>http://9cat.top/2018/07/10/学习笔记-C-primer-plus编程练习题答案/</id>
    <published>2018-07-10T05:30:34.000Z</published>
    <updated>2018-07-19T07:18:55.899Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><p> 5.结构CandyBar包含3个成员。第一个成员储存了糖块的品牌；第二个成员储存糖块的重量（可以有小数）；第三个成员储存了糖块的卡路里含量（整数）。请编写一个程序，声明这个结构，创建一个名为snack的CandyBar变量，并将其成员分别<code>初始化</code>为“Mocha Munch”、2.3和350.初始化应用在声明snack时进行。最后，程序显示snack变量的内容。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Asize=<span class="number">20</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CandyBar</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> brand[Asize];</span><br><span class="line"><span class="keyword">double</span> weight;</span><br><span class="line"><span class="keyword">int</span> calory;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">CandyBar snack=&#123;<span class="string">"Mocha Munch"</span>,<span class="number">2.3</span>,<span class="number">350</span>&#125;;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Here's the information of snack:\n"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"brand:"</span>&lt;&lt;snack.brand&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"weight:"</span>&lt;&lt;snack.weight&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"calory:"</span>&lt;&lt;snack.calory&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 6.结构CandyBar包含3个成员，如编程练习5所示。请编写一个程序，创建一个包含3个元素的CandyBar<code>数组</code>，并将它们初始化为所选择的值，然后显示每个结构的内容。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Asize=<span class="number">20</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CandyBar</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> brand[Asize];</span><br><span class="line"><span class="keyword">double</span> weight;</span><br><span class="line"><span class="keyword">int</span> calory;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">CandyBar snack[<span class="number">3</span>]=&#123;</span><br><span class="line">&#123;<span class="string">"Moucha Munch"</span>,<span class="number">2.3</span>,<span class="number">350</span>&#125;,</span><br><span class="line">&#123;<span class="string">"XuFuji"</span>,<span class="number">1.1</span>,<span class="number">300</span>&#125;,</span><br><span class="line">&#123;<span class="string">"Alps"</span>,<span class="number">0.4</span>,<span class="number">100</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;snack[i].brand&lt;&lt;<span class="built_in">endl</span></span><br><span class="line">    &lt;&lt;snack[i].weight&lt;&lt;<span class="built_in">endl</span></span><br><span class="line">    &lt;&lt;snack[i].calory&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>7.William Wingate从事披萨饼分析服务。对于每个披萨饼，他都需要记录下列信息：</p><ul><li>披萨饼公司的名称，可以有多个单词组成。</li><li>披萨饼的直径。</li><li>披萨饼的重量。<br>请设计一个能够存储这些信息的结构，并编写一个使用这种结构的程序。程序将请求用户输入上述信息，然后显示这些信息。请使用cin（或它的方法）和cout。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Size=<span class="number">20</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pizza</span>//声明结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> company[Size];</span><br><span class="line"><span class="keyword">double</span> diameter;</span><br><span class="line"><span class="keyword">double</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">pizza pie;<span class="comment">//创建一个名为pie的结构变量</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"What's the name of pizza company:"</span>;</span><br><span class="line"><span class="built_in">cin</span>.getline(pie.company,Size);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"What's the diameter of pizza:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;pie.diameter;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"What's the weight of pizza:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;pie.weight;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"company:"</span>&lt;&lt;pie.company&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"diameter:"</span>&lt;&lt;pie.diameter&lt;&lt;<span class="string">"inches"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"weight:"</span>&lt;&lt;pie.weight&lt;&lt;<span class="string">"ounches"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><p>3.编写一个菜单驱动程序的雏形。该程序显示提供4个选项的菜单————每个选项用一个字母标记。如果用户使用有效选项之外的字母进行响应，程序将提示用户输入一个有效的字母，直到用户这样做为止。然后，该程序使用一条swich语句，根据用户的执行一个简单的操作。该程序的运行情况如下：</p><pre><code>Please enter one of the following choices:c) carnivore        p) pianistt) tree            g) gamefPlease enter a c,p,t, or g:qPlease enter a c,p,t, or g:tA maple is a tree</code></pre><p>源代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter one of the following choices:\n"</span></span><br><span class="line">         &lt;&lt; <span class="string">"c)carnivore            p)pianist\n"</span></span><br><span class="line">         &lt;&lt; <span class="string">"t)tree                 g)game\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter a c,p,t, or g:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(ch!=<span class="string">'c'</span>&amp;&amp;ch!=<span class="string">'p'</span>&amp;&amp;ch!=<span class="string">'t'</span>&amp;&amp;ch!=<span class="string">'g'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Please enter a c,p,t, or g:"</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(ch)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A maple is a carnivore.\n"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'p'</span>:</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A maple is a painist.\n"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span>'t':</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A maple is a tree.\n"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'g'</span>:</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A maple is a game.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Ncutronia王国，货币单位是tvarp，收入所得税的计算方式如下：<br>5000 tvarps: 不收税<br>5001~15000 tvarps: 10%<br>15001~35000 tvarps: 15%<br>35000 tvarps以上：20%<br>例如，收入在38000tvarps时，所得税为5000 x 0.00 + 10000 x 0.10 + 20000 x 0.15 + 3000 x 0.20,即4600 tvarps。请编写一个程序，使用<code>循环</code>来要求用户输入收入，并报告所得税。当用户输入负数或非数字时，循环将结束。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> income,revenue;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入你的收入："</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;income&amp;&amp;income&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(income&lt;=<span class="number">5000</span>)</span><br><span class="line">revenue=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(income&lt;=<span class="number">15000</span>)</span><br><span class="line">revenue=<span class="number">0.1</span>*(income<span class="number">-5000</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(income&lt;=<span class="number">35000</span>)</span><br><span class="line">revenue=<span class="number">0.1</span>*(<span class="number">15000</span><span class="number">-5000</span>)+<span class="number">0.15</span>*(income<span class="number">-15000</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">revenue=<span class="number">0.1</span>*(<span class="number">15000</span><span class="number">-5000</span>)+<span class="number">0.15</span>*(<span class="number">35000</span><span class="number">-15000</span>)+<span class="number">0.2</span>*(income<span class="number">-35000</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"你的所得税为："</span>&lt;&lt;revenue&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入你的收入："</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>32位汇编寄存器(转载)</title>
    <link href="http://9cat.top/2018/07/02/32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    <id>http://9cat.top/2018/07/02/32位汇编寄存器/</id>
    <published>2018-07-02T13:38:30.000Z</published>
    <updated>2018-07-02T13:55:56.539Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>32位CPU所含有的寄存器有：</p><p>4个数据寄存器(EAX、EBX、ECX和EDX)<br>2个变址和指针寄存器(ESI和EDI) 2个指针寄存器(ESP和EBP)<br>6个段寄存器(ES、CS、SS、DS、FS和GS)<br>1个指令指针寄存器(EIP) 1个标志寄存器(EFlags)</p><h2 id="1、数据寄存器"><a href="#1、数据寄存器" class="headerlink" title="1、数据寄存器"></a>1、数据寄存器</h2><p>数据寄存器主要用来保存操作数和运算结果等信息，从而节省读取操作数所需占用总线和访问存储器的时间。</p><p>32位CPU有4个32位的通用寄存器EAX、EBX、ECX和EDX。对低16位数据的存取，不会影响高16位的数据。这些<br>低16位寄存器分别命名为：AX、BX、CX和DX，它和先前的CPU中的寄存器相一致。</p><p>4个16位寄存器又可分割成8个独立的8位寄存器(AX：AH-AL、BX：BH-BL、CX：CH-CL、DX：DH-DL)，每个寄<br>存器都有自己的名称，可独立存取。程序员可利用数据寄存器的这种“可分可合”的特性，灵活地处理字/字<br>节的信息。</p><p>寄存器AX和AL通常称为<code>累加器</code>(Accumulator)，用累加器进行的操作可能需要更少时间。累加器可用于乘、<br>除、输入/输出等操作，它们的使用频率很高；<br>寄存器BX称为<code>基地址寄存器</code>(Base Register)。它可作为存储器指针来使用；<br>寄存器CX称为<code>计数寄存器</code>(Count Register)。在循环和字符串操作时，要用它来控制循环次数；在位操作<br>中，当移多位时，要用CL来指明移位的位数；<br>寄存器DX称为<code>数据寄存器</code>(Data Register)。在进行乘、除运算时，它可作为默认的操作数参与运算，也<br>可用于存放I/O的端口地址。</p><p>在16位CPU中，AX、BX、CX和DX不能作为基址和变址寄存器来存放存储单元的地址，但在32位CPU中，其32位<br>寄存器EAX、EBX、ECX和EDX不仅可传送数据、暂存数据保存算术逻辑运算结果，而且也可作为指针寄存器，所以，这些32位寄存器更具有通用性。</p><h2 id="2、变址寄存器"><a href="#2、变址寄存器" class="headerlink" title="2、变址寄存器"></a>2、变址寄存器</h2><p>32位CPU有2个32位通用寄存器ESI和EDI。其低16位对应先前CPU中的SI和DI，对低16位数据的存取，不影响<br>高16位的数据。</p><p>寄存器ESI、EDI、SI和DI称为<code>变址寄存器</code>(Index Register)，它们主要用于存放存储单元在段内的偏移量，<br>用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便。</p><p>变址寄存器不可分割成8位寄存器。作为通用寄存器，也可存储算术逻辑运算的操作数和运算结果。</p><p>它们可作一般的存储器指针使用。在字符串操作指令的执行过程中，对它们有特定的要求，而且还具有特<br>殊的功能。</p><h2 id="3、指针寄存器"><a href="#3、指针寄存器" class="headerlink" title="3、指针寄存器"></a>3、指针寄存器</h2><p>32位CPU有2个32位通用寄存器EBP和ESP。其低16位对应先前CPU中的SBP和SP，对低16位数据的存取，不影<br>响高16位的数据。</p><p>寄存器EBP、ESP、BP和SP称为<code>指针寄存器</code>(Pointer Register)，主要用于存放堆栈内存储单元的偏移量，<br>用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便。</p><p>指针寄存器不可分割成8位寄存器。作为通用寄存器，也可存储算术逻辑运算的操作数和运算结果。</p><p>它们主要用于访问堆栈内的存储单元，并且规定：</p><p>BP为<code>基指针</code>(Base Pointer)寄存器，用它可直接存取堆栈中的数据；<br>SP为<code>堆栈指针</code>(Stack Pointer)寄存器，用它只可访问栈顶。</p><h2 id="4、段寄存器"><a href="#4、段寄存器" class="headerlink" title="4、段寄存器"></a>4、段寄存器</h2><p>段寄存器是根据内存分段的管理模式而设置的。内存单元的物理地址由段寄存器的值和一个偏移量组合而成<br>的，这样可用两个较少位数的值组合成一个可访问较大物理空间的内存地址。</p><p>CPU内部的段寄存器：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CS</span>——代码段寄存器(Code <span class="meta">Segment</span> Register)，其值为代码段的段值；</span><br><span class="line"><span class="built_in">DS</span>——数据段寄存器(Data <span class="meta">Segment</span> Register)，其值为数据段的段值；</span><br><span class="line"><span class="built_in">ES</span>——附加段寄存器(Extra <span class="meta">Segment</span> Register)，其值为附加数据段的段值；</span><br><span class="line"><span class="built_in">SS</span>——堆栈段寄存器(Stack <span class="meta">Segment</span> Register)，其值为堆栈段的段值；</span><br><span class="line"><span class="built_in">FS</span>——附加段寄存器(Extra <span class="meta">Segment</span> Register)，其值为附加数据段的段值；</span><br><span class="line"><span class="built_in">GS</span>——附加段寄存器(Extra <span class="meta">Segment</span> Register)，其值为附加数据段的段值。</span><br></pre></td></tr></table></figure></p><p>在16位CPU系统中，它只有4个段寄存器，所以，程序在任何时刻至多有4个正在使用的段可直接访问；在32位<br>微机系统中，它有6个段寄存器，所以，在此环境下开发的程序最多可同时访问6个段。</p><p>32位CPU有两个不同的工作方式：实方式和保护方式。在每种方式下，段寄存器的作用是不同的。有关规定简<br>单描述如下：</p><ul><li>实方式： 前4个段寄存器CS、DS、ES和SS与先前CPU中的所对应的段寄存器的含义完全一致，内存单元的逻辑地址仍为“段值：偏移量”的形式。为访问某内存段内的数据，必须使用该段寄存器和存储单元的偏移量。</li><li>保护方式： 在此方式下，情况要复杂得多，装入段寄存器的不再是段值，而是称为“选择子”(Selector)的某个值。</li></ul><h2 id="5、指令指针寄存器"><a href="#5、指令指针寄存器" class="headerlink" title="5、指令指针寄存器"></a>5、指令指针寄存器</h2><p>32位CPU把指令指针扩展到32位，并记作EIP，EIP的低16位与先前CPU中的IP作用相同。</p><p>指令指针EIP、IP(Instruction Pointer)是存放下次将要执行的指令在代码段的偏移量。在具有预取指令功能的系统中，下次要执行的指令通常已被预取到指令队列中，除非发生转移情况。所以，在理解它们的功能时，不考虑存在指令队列的情况。</p><p>在实方式下，由于每个段的最大范围为64K，所以，EIP中的高16位肯定都为0，此时，相当于只用其低16位的IP来反映程序中指令的执行次序。</p><h2 id="6、标志寄存器"><a href="#6、标志寄存器" class="headerlink" title="6、标志寄存器"></a>6、标志寄存器</h2><h1 id="一、运算结果标志位"><a href="#一、运算结果标志位" class="headerlink" title="一、运算结果标志位"></a>一、运算结果标志位</h1><h2 id="1、进位标志CF-Carry-Flag"><a href="#1、进位标志CF-Carry-Flag" class="headerlink" title="1、进位标志CF(Carry Flag)"></a>1、进位标志CF(Carry Flag)</h2><p><code>进位标志CF</code>主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。</p><p>使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。</p><h2 id="2、奇偶标志PF-Parity-Flag"><a href="#2、奇偶标志PF-Parity-Flag" class="headerlink" title="2、奇偶标志PF(Parity Flag)"></a>2、奇偶标志PF(Parity Flag)</h2><p><code>奇偶标志PF</code>用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。</p><p>利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。</p><h2 id="3、辅助进位标志AF-Auxiliary-Carry-Flag"><a href="#3、辅助进位标志AF-Auxiliary-Carry-Flag" class="headerlink" title="3、辅助进位标志AF(Auxiliary Carry Flag)"></a>3、辅助进位标志AF(Auxiliary Carry Flag)</h2><p>在发生下列情况时，<code>辅助进位标志AF</code>的值被置为1，否则其值为0：</p><p>(1)、在字操作时，发生低字节向高字节进位或借位时；<br>(2)、在字节操作时，发生低4位向高4位进位或借位时。</p><p>对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。</p><h2 id="4、零标志ZF-Zero-Flag"><a href="#4、零标志ZF-Zero-Flag" class="headerlink" title="4、零标志ZF(Zero Flag)"></a>4、零标志ZF(Zero Flag)</h2><p><code>零标志ZF</code>用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。</p><h2 id="5、符号标志SF-Sign-Flag"><a href="#5、符号标志SF-Sign-Flag" class="headerlink" title="5、符号标志SF(Sign Flag)"></a>5、符号标志SF(Sign Flag)</h2><p><code>符号标志SF</code>用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用补码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。</p><h2 id="6、溢出标志OF-Overflow-Flag"><a href="#6、溢出标志OF-Overflow-Flag" class="headerlink" title="6、溢出标志OF(Overflow Flag)"></a>6、溢出标志OF(Overflow Flag)</h2><p><code>溢出标志OF</code>用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。</p><p>“溢出”和“进位”是两个不同含义的概念，不要混淆。如果不太清楚的话，请查阅《计算机组成原理》课程中的有关章节。</p><h1 id="二、状态控制标志位"><a href="#二、状态控制标志位" class="headerlink" title="二、状态控制标志位"></a>二、状态控制标志位</h1><p>状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。</p><h2 id="1、追踪标志TF-Trap-Flag"><a href="#1、追踪标志TF-Trap-Flag" class="headerlink" title="1、追踪标志TF(Trap Flag)"></a>1、追踪标志TF(Trap Flag)</h2><p>当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。</p><p>指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。</p><h2 id="2、中断允许标志IF-Interrupt-enable-Flag"><a href="#2、中断允许标志IF-Interrupt-enable-Flag" class="headerlink" title="2、中断允许标志IF(Interrupt-enable Flag)"></a>2、中断允许标志IF(Interrupt-enable Flag)</h2><p>中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：</p><p>(1)、当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；</p><p>(2)、当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。</p><p>CPU的指令系统中也有专门的指令来改变标志位IF的值。</p><h2 id="3、方向标志DF-Direction-Flag"><a href="#3、方向标志DF-Direction-Flag" class="headerlink" title="3、方向标志DF(Direction Flag)"></a>3、方向标志DF(Direction Flag)</h2><p>方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。具体规定在第5.2.11节——字符串操作指令——中给出。在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。</p><h1 id="三、32位标志寄存器增加的标志位"><a href="#三、32位标志寄存器增加的标志位" class="headerlink" title="三、32位标志寄存器增加的标志位"></a>三、32位标志寄存器增加的标志位</h1><h2 id="1、I-O特权标志IOPL-I-O-Privilege-Level"><a href="#1、I-O特权标志IOPL-I-O-Privilege-Level" class="headerlink" title="1、I/O特权标志IOPL(I/O Privilege Level)"></a>1、I/O特权标志IOPL(I/O Privilege Level)</h2><p>I/O特权标志用两位二进制位来表示，也称为I/O特权级字段。该字段指定了要求执行I/O指令的特权级。如果当前的特权级别在数值上小于等于IOPL的值，那么，该I/O指令可执行，否则将发生一个保护异常。</p><h2 id="2、嵌套任务标志NT-Nested-Task"><a href="#2、嵌套任务标志NT-Nested-Task" class="headerlink" title="2、嵌套任务标志NT(Nested Task)"></a>2、嵌套任务标志NT(Nested Task)</h2><p>嵌套任务标志NT用来控制中断返回指令IRET的执行。具体规定如下：</p><p>(1)、当NT=0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断返回操作；</p><p>(2)、当NT=1，通过任务转换实现中断返回。</p><h2 id="3、重启动标志RF-Restart-Flag"><a href="#3、重启动标志RF-Restart-Flag" class="headerlink" title="3、重启动标志RF(Restart Flag)"></a>3、重启动标志RF(Restart Flag)</h2><p>重启动标志RF用来控制是否接受调试故障。规定：RF=0时，表示“接受”调试故障，否则拒绝之。在成功执行完一条指令后，处理机把RF置为0，当接受到一个非调试故障时，处理机就把它置为1，中国自学编程网整理发布！。</p><h2 id="4、虚拟8086方式标志VM-Virtual-8086-Mode"><a href="#4、虚拟8086方式标志VM-Virtual-8086-Mode" class="headerlink" title="4、虚拟8086方式标志VM(Virtual 8086 Mode)"></a>4、虚拟8086方式标志VM(Virtual 8086 Mode)</h2><p>如果该标志的值为1，则表示处理机处于虚拟的8086方式下的工作状态，否则，处理机处于一般保护方式下的工作状态。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="汇编" scheme="http://9cat.top/categories/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="汇编" scheme="http://9cat.top/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>浮点数的编码方式</title>
    <link href="http://9cat.top/2018/07/02/%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/"/>
    <id>http://9cat.top/2018/07/02/浮点数的编码方式/</id>
    <published>2018-07-02T10:31:42.000Z</published>
    <updated>2018-07-02T12:30:30.259Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-float类型的IEEE编码"><a href="#1-float类型的IEEE编码" class="headerlink" title="1.float类型的IEEE编码"></a>1.float类型的IEEE编码</h2><p><img src="1.png" alt=""><br>在进行二进制转换前，需要对单精度浮点数进行<code>科学计数法</code>。例如，将float类型的12.25f转换成IEEE编码，需要12.25f转换成对应的二进制数1100.01，<code>整数部分</code>为1100，<code>小数部分</code>为01；小数点向左移动，每移动1次指数加1，移动到<code>除符号位</code>的最高位为1处，停止移动,这里移动3次。对12.25f进行科学计数法转换后二进制部分为1.10001，指数部分为3.在IEEE编码中，由于在二进制情况下最高位始终为1，为一个恒定值，故将其忽略不计。这里是一个整数，所以符号位添0。</p><h3 id="12-25经转换后各位的情况："><a href="#12-25经转换后各位的情况：" class="headerlink" title="12.25经转换后各位的情况："></a>12.25经转换后各位的情况：</h3><ul><li>符号位：0</li><li>指数位：十进制3+127，转换为二进制是10000010</li><li>尾数位：10001000000000000000000<br>由于尾数位中最高位为1是恒定值，故省略不计，只要转换回十进制时加1即可。为什么指数位要加<code>127</code>呢？由于指数可能出现负数，十进制数127可表示二进制数01111111.IEEE编码方式规定，当指数域小于01111111时为一个负数，反之为正数，因此01111111为0。<br>12.25f转换后的IEEE编码按照二进制拼接为01000001010001000000000000000000。转换成十六进制数为0x41440000，内存中以小尾方式排列，故为00 00 44 41。分析结果如下图所示：<br><img src="2.png" alt=""><br>上面演示了符号位为正，指数位也为正的情况。那么什么情况下指数为负呢？根据科学计数法，小数点向小数部分移动时，指数需要以0开始做减法。浮点数-0.125f转换为IEEE编码后，将会是一个符号位为1，指数部分为负的小数。-0.125f经转换后二进制部分为0.001，用科学计数法表示为1.0；指数部分为-3.<h3 id="0-125fIEEE转换后各位的情况："><a href="#0-125fIEEE转换后各位的情况：" class="headerlink" title="-0.125fIEEE转换后各位的情况："></a>-0.125fIEEE转换后各位的情况：</h3></li><li>符号位：1</li><li>指数位：十进制127+(-3)，转换为二进制是01111100，如果不足为8位，则高位补0</li><li>尾数位：00000000000000000000000<br>-0.125f转换后的IEEE编码二进制拼接为10111110000000000000000000000000。转换成十六进制为0xBE000000，内存中显示为00 00 00 BE<br>上面的两个浮点数小数部分转换为二进制时都是有穷的，如果小数部分转换为二进制时得到一个无穷值，则会根据尾数部分的长度舍弃多余的部分。单精度数1.3f，小数部分转换为二进制就会产生无穷值，依次转换为：0.3、0.6、1.2、0.4、0.8、1.6、0.4、0.8…转换后得到的二进制数为1.01001100110011001100110，到23位终止，尾数部分无法保存更大的值。<h3 id="1-3f经IEEE转换后各位的情况："><a href="#1-3f经IEEE转换后各位的情况：" class="headerlink" title="1.3f经IEEE转换后各位的情况："></a>1.3f经IEEE转换后各位的情况：</h3></li><li>符号位：0</li><li>指数位：十进制0+127，转换二进制01111111</li><li>尾数位：01001100110011001100110<br>1.3f转换后的IEEE编码二进制拼接为00111111101001100110011001100110。转换成十六进制为0x3FA66666，内存中显示为66 66 A6 3F。由于在转换二进制过程中产生了无穷值，舍弃了部分位数，所以进行IEEE编码转换得到的是一个近似值，存在一定误差。再次将这个IEEE编码转换成十进制小数，得到的值为1.2516582，四舍五入后为1.3。这就解释了为什么C++在比较浮点数值是否为0时，要做一个区间比较而不是直接进行等值比较。<br>正确浮点数比较的代码如下图所示：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> fTemp = <span class="number">0.0001f</span>;</span><br><span class="line"><span class="keyword">if</span> (fFloat &gt;= -fTemp &amp;&amp; fFloat &lt;= fTemp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//fTemp等于0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-double类型的IEEE编码"><a href="#2-double类型的IEEE编码" class="headerlink" title="2.double类型的IEEE编码"></a>2.double类型的IEEE编码</h2><p>double类型和float类型大同小异，只是double类型表示的范围更大，占用空间更多，是float类型所占用空间的两倍。当然，精准度也会更高。<br>double类型占8字节的内存空间，同样，高位也用于表示符号，指数位占<code>11位</code>，剩余42位用于表示位数。<br>在float中，指数范围用8位表示，加127后用于判断指数符号。在double中，由于扩大了精度，因此指数范围使用11位正数表示，加1023后可用于指数符号判断。<br>double类型的IEEE编码转换过程与float类型一样，可根据float类型的转换流程来转换double类型。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="计算机基础" scheme="http://9cat.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>2.2.2基于UDP的通信</title>
    <link href="http://9cat.top/2018/07/02/2-2-2%E5%9F%BA%E4%BA%8EUDP%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>http://9cat.top/2018/07/02/2-2-2基于UDP的通信/</id>
    <published>2018-07-02T07:50:42.000Z</published>
    <updated>2018-07-02T09:28:00.975Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-服务器端代码"><a href="#1-服务器端代码" class="headerlink" title="1.服务器端代码"></a>1.服务器端代码</h2><p>基于UDP协议的服务器端程序不会去监听端口和等待请求连接，因此UDP协议的服务器端程序相对于TCP协议的服务器程序来说代码更短。基于UDP协议的服务器端代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib, <span class="meta-string">"ws2_32"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line">WSAStartup(MAKEWORD (<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line"><span class="comment">//创建套接字</span></span><br><span class="line">SOCKET sServer = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line"><span class="comment">//对sockaddr_in结构体填充地址、端口等信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">ServerAddr</span>;</span></span><br><span class="line">ServerAddr.sin_family = AF_INET;</span><br><span class="line">ServerAddr.sin_addr.S_un.S_addr = inet_addr(<span class="string">"10.10.30.16"</span>);</span><br><span class="line">ServerAddr.sin_port = htons(<span class="number">1234</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定套接字与地址信息</span></span><br><span class="line">bind(sServer, (SOCKADDR *)&amp;ServerAddr, <span class="keyword">sizeof</span>(ServerAddr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收消息</span></span><br><span class="line"><span class="keyword">char</span> szMsg[MAXBYTE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">ClientAddr</span>;</span></span><br><span class="line"><span class="keyword">int</span> nSize = <span class="keyword">sizeof</span>(ClientAddr);</span><br><span class="line">recvfrom(sServer, szMsg, MAXBYTE, <span class="number">0</span>, (SOCKADDR*)&amp;ClientAddr,&amp;nSize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Client Msg:%s \r\n"</span>,szMsg);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ClientIP=%s:%d\r\n"</span>,inet_ntoa(ClientAddr.sin_addr),ntohs(ClientAddr.sin_port));</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送消息</span></span><br><span class="line">lstrcpy(szMsg, <span class="string">"Hello Client!\r\n"</span>);</span><br><span class="line">nSize = <span class="keyword">sizeof</span>(ClientAddr);</span><br><span class="line">sendto(sServer,szMsg,<span class="built_in">strlen</span>(szMsg) + <span class="keyword">sizeof</span>(<span class="keyword">char</span>),<span class="number">0</span>,(SOCKADDR*)&amp;ClientAddr,nSize);</span><br><span class="line"></span><br><span class="line">WSACleanup();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-客户端代码"><a href="#2-客户端代码" class="headerlink" title="2.客户端代码"></a>2.客户端代码</h2><p>基于UDP客户端的代码相对于TCP协议的客户端来讲，不需要调用connect()函数进行连接，省去了TCP协议的“三次握手”的过程，可以直接发送数据给服务器。基于UDP协议的客户端代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib, <span class="meta-string">"ws2_32"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line">WSAStartup(MAKEWORD (<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line"><span class="comment">//创建套接字</span></span><br><span class="line">SOCKET sClient = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line"><span class="comment">//对sockaddr_in结构体填充地址、端口等信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">ServerAddr</span>;</span></span><br><span class="line">ServerAddr.sin_family = AF_INET;</span><br><span class="line">ServerAddr.sin_addr.S_un.S_addr = inet_addr(<span class="string">"10.10.30.16"</span>);</span><br><span class="line">ServerAddr.sin_port = htons(<span class="number">1234</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送消息</span></span><br><span class="line"><span class="keyword">char</span> szMsg[MAXBYTE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">lstrcpy(szMsg, <span class="string">"Hello Server!\r\n"</span>);</span><br><span class="line"><span class="keyword">int</span> nSize = <span class="keyword">sizeof</span>(ServerAddr);</span><br><span class="line">sendto(sClient,szMsg,<span class="built_in">strlen</span>(szMsg) + <span class="keyword">sizeof</span>(<span class="keyword">char</span>),<span class="number">0</span>,(SOCKADDR*)&amp;ServerAddr,nSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受消息</span></span><br><span class="line">nSize = <span class="keyword">sizeof</span>(ServerAddr);</span><br><span class="line">recvfrom(sClient, szMsg, MAXBYTE, <span class="number">0</span>, (SOCKADDR*)&amp;ServerAddr,&amp;nSize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Server Msg: %s \r\n"</span>,szMsg);</span><br><span class="line"></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完成服务器端和客户端代码后，将代码都进行编译连接，然后先运行服务器端的程序，再运行客户端程序，这时可以看到服务器端和客户端能够正常接收到对方发来的字符串信息，说明通信成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="网络编程" scheme="http://9cat.top/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="UDP" scheme="http://9cat.top/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>2.2.1实例;基于TCP的通信</title>
    <link href="http://9cat.top/2018/07/02/2-2-1%E5%AE%9E%E4%BE%8B-%E5%9F%BA%E4%BA%8ETCP%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>http://9cat.top/2018/07/02/2-2-1实例-基于TCP的通信/</id>
    <published>2018-07-02T03:36:47.000Z</published>
    <updated>2018-07-02T05:59:05.541Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-服务器端代码"><a href="#1-服务器端代码" class="headerlink" title="1.服务器端代码"></a>1.服务器端代码</h2><p>创建一个TCP的服务器端的程序需要调用的函数流程如下：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WSAStartup<span class="function"><span class="params">()</span>-&gt;</span>socket<span class="function"><span class="params">()</span>-&gt;</span>bind<span class="function"><span class="params">()</span>-&gt;</span>listen<span class="function"><span class="params">()</span>-&gt;</span>accept<span class="function"><span class="params">()</span>-&gt;</span>send<span class="function"><span class="params">()</span>/<span class="title">recv</span><span class="params">()</span>-&gt;</span>closesocket<span class="function"><span class="params">()</span>-&gt;</span>WSACleanup()</span><br></pre></td></tr></table></figure></p><p>只要依次调用上面的函数即可。服务器端的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib, <span class="meta-string">"ws2_32"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line">WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>),&amp;wsaData);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建套接字</span></span><br><span class="line">SOCKET sListen = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对sockaddr_in结构体填充地址、端口信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">ServerAddr</span>;</span></span><br><span class="line">ServerAddr.sin_family = AF_INET;</span><br><span class="line">ServerAddr.sin_addr.S_un.S_addr = inet_addr(<span class="string">"10.10.30.16"</span>);</span><br><span class="line">ServerAddr.sin_port = htons(<span class="number">1234</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定套接字与地址信息</span></span><br><span class="line">bind(sListen, (SOCKADDR *)&amp;ServerAddr, <span class="keyword">sizeof</span>(ServerAddr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//端口监听</span></span><br><span class="line">listen(sListen, SOMAXCONN);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接请求</span></span><br><span class="line">sockaddr_in ClientAddr;</span><br><span class="line"><span class="keyword">int</span> nSize = <span class="keyword">sizeof</span>(ClientAddr);</span><br><span class="line"></span><br><span class="line">SOCKET sClient = accept(sListen, (SOCKADDR *)&amp;ClientAddr, &amp;nSize );</span><br><span class="line"><span class="comment">//输出客户端使用的IP地址和端口号</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ClientIP=%s:%d\r\n"</span>,inet_ntoa(ClientAddr.sin_addr),ntohs(ClientAddr.sin_port));</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送消息</span></span><br><span class="line"><span class="keyword">char</span> szMsg[MAXBYTE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">lstrcpy(szMsg, <span class="string">"hello Client!\r\n"</span>);</span><br><span class="line">send(sClient, szMsg,<span class="built_in">strlen</span>(szMsg) + <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收消息</span></span><br><span class="line">recv(sClient, szMsg,MAXBYTE, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Client Msg : %s \r\n"</span>,szMsg);</span><br><span class="line"></span><br><span class="line">WSACleanup();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样一个服务器端的程序就完成了。为了起到演示的作用，不让多余的东西影响流程的清晰化，这里没有对API函数的返回值进行判断。在实际的开发中，为了保证程序的健壮性，应该对各函数的返回值进行判断。</p><p>在一个工作区下再新建一个项目的过程<br>PS：需要一定VC的基础，否则很可能会失败！<br><img src="TCP.png" alt=""></p><h2 id="2-客户端代码"><a href="#2-客户端代码" class="headerlink" title="2.客户端代码"></a>2.客户端代码</h2><p>在客户端中同样也是调用前面介绍的API函数进行搭积木式的编程就可以了。客户端的代码调用API的流程如下：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WSAStartup<span class="function"><span class="params">()</span>-&gt;</span>socket<span class="function"><span class="params">()</span>-&gt;</span>connect<span class="function"><span class="params">()</span>-&gt;</span>send<span class="function"><span class="params">()</span>/<span class="title">recv</span><span class="params">()</span>-&gt;</span>closexocket<span class="function"><span class="params">()</span>-&gt;</span>WSACleanup()</span><br></pre></td></tr></table></figure></p><p>客户端的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib, <span class="meta-string">"ws2_32"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line">WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>),&amp;wsaData);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建套接字</span></span><br><span class="line">SOCKET sServer = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对sockaddr_in结构体填充地址、端口信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">ServerAddr</span>;</span></span><br><span class="line">ServerAddr.sin_family = AF_INET;</span><br><span class="line">ServerAddr.sin_addr.S_un.S_addr = inet_addr(<span class="string">"10.10.30.16"</span>);</span><br><span class="line">ServerAddr.sin_port = htons(<span class="number">1234</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接服务器</span></span><br><span class="line">connect(sServer, (SOCKADDR *)&amp;ServerAddr, <span class="keyword">sizeof</span>(ServerAddr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> szMsg[MAXBYTE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收消息</span></span><br><span class="line">recv(sServer, szMsg, MAXBYTE, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Server Msg : %s \r\n"</span>, szMsg);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送消息</span></span><br><span class="line">lstrcpy(szMsg, <span class="string">"hello Server!\r\n"</span>);</span><br><span class="line">send(sServer, szMsg,<span class="built_in">strlen</span>(szMsg) + <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">WSACleanup();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果如下所示：<br><img src="TCP2.png" alt=""></p><p><img src="TCP3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="网络编程" scheme="http://9cat.top/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Winsock" scheme="http://9cat.top/tags/Winsock/"/>
    
  </entry>
  
  <entry>
    <title>缓冲区溢出练习</title>
    <link href="http://9cat.top/2018/07/01/auth-overflow/"/>
    <id>http://9cat.top/2018/07/01/auth-overflow/</id>
    <published>2018-07-01T13:54:52.000Z</published>
    <updated>2018-07-01T14:52:52.852Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>缓冲区溢出漏洞从计算机出现初期就已经存在，并且今天仍然存在。<br>尽管C语言的简单性增加了程序员的控制能力，提高了最后得到的程序的效率，但是程序员不小心的话，这种简单性会导致程序缓冲区溢出和存储器泄露这样的漏洞。这意味着一旦给某个变量分配了内存空间，则没有内置的安全机制来确保这个变量的容量能适应已分配的存储空间。如果程序员把10个字节的数据存入只分配了8个字节空间的缓冲区中，这种操作是允许的，即使这种操作很可能导致程序崩溃。这称为<code>缓冲区超限(buffer overrun)</code>或缓冲区溢出，由于多出的2个字节数据会溢出，存储在已分配的存储空间之外，因此会重写已分配存储空间之后的数据。如果重写的是一段关键数据，程序会崩溃。<br>通过破坏内存来控制执行流程。程序auth_overflow.c演示了这个概念。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check_authentication</span><span class="params">(<span class="keyword">char</span> *password)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> auth_flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> password_buffer[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(password_buffer,password);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(password_buffer,<span class="string">"brillig"</span>)==<span class="number">0</span>)</span><br><span class="line">auth_flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(password_buffer,<span class="string">"outgrabe"</span>)==<span class="number">0</span>)</span><br><span class="line">auth_flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> auth_flag;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Usage:%s&lt;password&gt;\n"</span>,argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(check_authentication(argv[<span class="number">1</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n-=-=-=-=-=-=-=-=\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Access Granted.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n-=-=-=-=-=-=-=-=\n"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nAccess Denied.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个示例程序接受一个密码作为它唯一的命令行参数，然后调用函数check_authentication()。这个函数允许<code>两个密码</code>，意味着它允许多重验证方法。如果使用网络两个密码中的一个，函数会返回1，这样会授予访问权限。在编译代码前，通过查看源代码，您应该能够推测出它的大部分功能。但在程序时，请使用-g选项，因为随后会对其进行调试。<br><img src="overflow.png" alt=""><br>您也许早就推测出会发生什么，但让我们使用调试工具对它进行检查以查看其细节。<br><img src="overflow2.png" alt=""><br>使用-q选项会使得GDB调试工具取消欢迎标语，并在第10行和第17行设置了断点。程序运行时，会在断点处暂停并为我们提供一个检查内存的机会。<br><img src="overflow3.png" alt=""><br>第1个断点在strcpy()发生之前。通过检查password——buffer指针，调试工具显示它填充的是随机的未初始化的数据，位于内存中0xbffff5ec处。通过检查auth_flag变量的地址，我们可以看到他的存储位置0xbffff5fc和它的值0。可以使用打印命令做算术运算，它显示auth_flag位于password_buffer开始之后的16字节处。也可以在以password_buffer开始的一块内存中看到这种关系。<br><img src="overflow4.png" alt=""><br>继续运行到strcpy()之后的第2个断点，再次对这些存储单元进行检查。password_buffer溢出到auth_flag中，将它的前两个字节变为0x41。值0x00004141可能看起来是颠倒的，但是要记住x86采用的是小端存储方式。如果单独检查每个4字节单元，就可以看到内存实际上是如何排列的。最终，程序会将这个值看做一个整数，其值为1094795585。<br><img src="overflow5.png" alt=""><br>溢出之后，函数check_authentication()会返回1094795585，而不是0.因为if语句认为任何非0值都能通过验证，所以程序执行流程进入授权部分。在这个列子中，变量auth_flag是<code>执行控制点</code>，因此覆盖该值是实现控制的根源。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="溢出" scheme="http://9cat.top/categories/%E6%BA%A2%E5%87%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>一位程序员的十年总结(转载)</title>
    <link href="http://9cat.top/2018/07/01/%E4%B8%80%E4%BD%8D%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%8D%81%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>http://9cat.top/2018/07/01/一位程序员的十年总结/</id>
    <published>2018-07-01T13:01:24.000Z</published>
    <updated>2018-07-01T13:12:42.398Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>展望未来，总结过去10年的程序员生涯，给程序员小弟弟小妹妹们的一些总结性忠告<br>走过的路，回忆起来是那么曲折，把自己的一些心得体会分享给程序员兄弟姐妹们，虽然时代在变化，但是很可能你也会走我已经做过的10年的路程，有些心得体会你可以借鉴一下，觉得说得有道理的你就接纳，觉得说得没道理的，你就抛弃，以下是我发自内心的，给大家的忠告，特别是针对那些小弟弟妹妹们。</p><h3 id="01-自己的户口档案、养老保险、医疗保险、住房公积金一定要保管好。"><a href="#01-自己的户口档案、养老保险、医疗保险、住房公积金一定要保管好。" class="headerlink" title="01. 自己的户口档案、养老保险、医疗保险、住房公积金一定要保管好。"></a>01. 自己的户口档案、养老保险、医疗保险、住房公积金一定要保管好。</h3><p>由于程序员行业每年跳槽一次，我不隐瞒大家，我至少换过5个以上的单位，这期间跳来跳去，甚至是城市都换过3个。还好户口没丢掉，其他都已经是乱了，好几个城市里，都有交过三金，甚至是一个城市的2个区里交的都有，那些东西，10年后，会变得很重要。你买房子若有公积金，可以取出来，贷款利率也会比较低一些，有孩子了，还需要上学，生病了还需要医疗保险。<br>特别是买房子时，你要商业贷款与公积金贷款的利率差别还是很大，有可能会有10万的差距。你平时都注意这些，会给你带来的损失会最小，例如每个月缴纳300元的公积金，公司也缴纳300元，你一个月能存下来600元，一年就是7200元，10年就是72000元。我以前都忽视了这些，到我需要买房子时，公积金里可能只有几千元，10年很快就过去了，结果我没能存下来多少公积金，医疗保险，养老金等更别提了，都已经稀里糊涂了，这些损失10年累加起来，是很庞大的数字，大家要注意，跳槽换工作时也要保护好自身的利益，现在房价很贵，你可能是跟我一样，大山里出来打拼的娃子，家里也没有丰厚的积蓄，只有靠自己拼搏，买房子是人生的一件大事，等你到了10年，才想到这个事情，已经晚了，特别是孩子要上学，上幼儿园等，需要户口啥的都要齐全。</p><h3 id="02-不要轻易换笔记本电脑，不要跟潮流，不要买过多的电子产品，不要过于频繁的更换手机。"><a href="#02-不要轻易换笔记本电脑，不要跟潮流，不要买过多的电子产品，不要过于频繁的更换手机。" class="headerlink" title="02. 不要轻易换笔记本电脑，不要跟潮流，不要买过多的电子产品，不要过于频繁的更换手机。"></a>02. 不要轻易换笔记本电脑，不要跟潮流，不要买过多的电子产品，不要过于频繁的更换手机。</h3><p>这方面我的经验教训也是惨痛的。我大概前后购买过5-6个笔记本，以前的都是1万多元一台，最近买的是一台是1万多给女朋友的，自己买了一台是7500元左右，手机大概换过接近10个了，这些钱加起来也足够有10万以上了，你可能一不小心就购买了这些电子产品，但是时间长了，你一回过头来想想，你为什么赚得也不少，但是为什么还是那么穷，是因为你购买这些电子产品花费了过多的金钱了，平时笔记本啥的贵重物品要保护好，我一个同事不小心丢了2台笔记本电脑，接近2万的损失啊，你净赚2万，不是那么容易的，这个窟窿不是开玩笑的，我曾经也被人偷了一个崭新的笔记本，损失1.5万左右，更糟糕的是最新的代码也丢被偷了。</p><h3 id="03-这年代外语、学历、职称、驾驶证还是蛮重要的。"><a href="#03-这年代外语、学历、职称、驾驶证还是蛮重要的。" class="headerlink" title="03. 这年代外语、学历、职称、驾驶证还是蛮重要的。"></a>03. 这年代外语、学历、职称、驾驶证还是蛮重要的。</h3><p>想找高薪，外资企业是正确的选择，在同样的打工里，外资企业的收入普遍是高的，我就想不明白，我们的赚钱能力怎么就比不过人家了，社会不断发展，将来可能去外国就像串门一样了，也说不定的，外语好将来的就业机会也会更多更广一些。<br>学历并不代表啥，但是学历也是敲门砖，例如有300个应聘者，那至少重点本科以下的，统统不看了，因为实在是来不及看了，你再厉害也被挡在机会的门外了，同样有时候你想改行什么的，职称也很重要，最起码评个中级职称，说不定还有机会能进入大学或者政府部门还是有可能性。<br>若有充裕的时间，应该把驾驶证考了，因为你越到后面越忙与工作家庭，没机会学车了也说不定的，平时也别光顾拼命工作，工作10年后你才发现，原来身边的人都至少硕士学历了，你被社会自动淘汰了，我现在就有这个感觉，虽然我带过很多硕士，他们的就业机会比我还好，经常能进入名牌企业，我也一直进不去。</p><h3 id="04-不要谈过多的女朋友，谈女朋友要看准，下手要稳准狠。"><a href="#04-不要谈过多的女朋友，谈女朋友要看准，下手要稳准狠。" class="headerlink" title="04. 不要谈过多的女朋友，谈女朋友要看准，下手要稳准狠。"></a>04. 不要谈过多的女朋友，谈女朋友要看准，下手要稳准狠。</h3><p>我谈过2个女朋友，平均每个女朋友身上的开支前后大概会有10万左右，还好我不用谈第3个女朋友了，若投资失误，那也是很残忍的，谈女朋友也会消耗很多时间精力、还会消耗很多金钱，实话的讲的确是这样的，人家女孩子也值钱啊，凭什么就那么轻易的跟你啊，我跟第一个朋友分手时，我的生活至少是倒退了3-4年，一切从零开始，一切从头开始，我劝大家谈女朋友是人生最大的一笔买卖，投资失误会有惨痛的后果，不仅仅是金钱上的损失，更会有精神、心灵上的沉重打击，大家要学会珍惜女朋友，要学会哄好女朋友，让老婆开心每一天，虽然鱼儿上钩了，不用再下鱼饵了，偶尔也别忘记放点米，这个鱼要是脱钩了，那不是开玩笑的。</p><h3 id="05-工作不要更换得太过于频繁，选好了行业方向最好别更换太频繁。"><a href="#05-工作不要更换得太过于频繁，选好了行业方向最好别更换太频繁。" class="headerlink" title="05. 工作不要更换得太过于频繁，选好了行业方向最好别更换太频繁。"></a>05. 工作不要更换得太过于频繁，选好了行业方向最好别更换太频繁。</h3><p>换工作，换行业方向，就像熊掰苞米一样的道理，有时候是丢了芝麻捡西瓜，有时候是丢了西瓜捡芝麻，这个道理我就不多讲了，大家都应该能明白的。</p><h3 id="06-要对身边的人好，要得到老板的信任、同事的认可及支持、珍惜良好的工作环境。"><a href="#06-要对身边的人好，要得到老板的信任、同事的认可及支持、珍惜良好的工作环境。" class="headerlink" title="06. 要对身边的人好，要得到老板的信任、同事的认可及支持、珍惜良好的工作环境。"></a>06. 要对身边的人好，要得到老板的信任、同事的认可及支持、珍惜良好的工作环境。</h3><p>有个朋友的QQ名字很有意思，“只爱陌生人”，陌生人是很有意思，但是最关键时刻，还是需要靠非陌生人，你每天跟同事一起生活，要维系好身边的人。你的成功与失败，往往是你身边的30-40个人决定的。你就是世界首富，他身边也是那么不超过100个人的在左右着他的生活，当你工作10年了，没一个老板信任你，没几个要好的同事朋友，那你惨了，你在这个世界上已经是很孤单了，你的收入，其实大多是来自这些身边的朋友给你介绍的生意，不大会网上掉几个馅饼的。<br>现在你身边的人有可能在不久的将来，给你提供很多好机会。</p><h3 id="07-钱很重要，但是生活质量比钱还重要，工作是很重要，但是家人比工作还重要。"><a href="#07-钱很重要，但是生活质量比钱还重要，工作是很重要，但是家人比工作还重要。" class="headerlink" title="07. 钱很重要，但是生活质量比钱还重要，工作是很重要，但是家人比工作还重要。"></a>07. 钱很重要，但是生活质量比钱还重要，工作是很重要，但是家人比工作还重要。</h3><p>钱不是万能的，但是没钱是万万不能的。钱赚了，身体夸了，全送给医院了，钱赚了，身心疲惫了，人活着为了啥？不就为了开开心心生活嘛？工作重要，但是失去了家人的爱，失去了女朋友，失去了老婆孩子，那这个工作有啥用了？工作很容易就换了，家人是换不了的，老婆不是想换就换的，孩子不是想换就换的，连自己的家庭都不负责的人，怎么可能对公司负责呢？我一直是这个观念，来面试时觉得工作更重要的，我们一般不录取的，那太假了，或者太不懂事了。</p><h3 id="08-工作累了，也别太贪玩，有时候还是需要多想想如何才能赚钱。"><a href="#08-工作累了，也别太贪玩，有时候还是需要多想想如何才能赚钱。" class="headerlink" title="08. 工作累了，也别太贪玩，有时候还是需要多想想如何才能赚钱。"></a>08. 工作累了，也别太贪玩，有时候还是需要多想想如何才能赚钱。</h3><p>时间一晃就过去了，工作累了是可以适当放松，但是别太贪玩，10年很容易就过去了，10年后你要买房子，要娶老婆，要买车子，要生娃娃，身体也会变得脆弱一些，需要良好的生活习惯，也经不起通宵了，通宵一次，你要低迷好几天才能缓过劲儿来，跟20刚出头完全不一样了，用钱的地方多了去了，父母也会变得更老一些，可能也需要你的照顾，整个家子都指望你赚钱，别到了这个时候，你才意识到赚钱是那么的重要，更何况现在城市的房价，动不动就是100万，加上按揭的利息，你很可能需要支付150万。还可能需要装修，买车子。可能你身上的压力是200万。别觉得谈钱就俗，你要学会赚钱，要有个需要赚钱的良好意识，当然你出身富裕家庭，就不用考虑这些因素了。</p><h3 id="09-每天一点点进步，每月一点点积累，要敬业要爱业，我们给别人提供的也是服务。"><a href="#09-每天一点点进步，每月一点点积累，要敬业要爱业，我们给别人提供的也是服务。" class="headerlink" title="09. 每天一点点进步，每月一点点积累，要敬业要爱业，我们给别人提供的也是服务。"></a>09. 每天一点点进步，每月一点点积累，要敬业要爱业，我们给别人提供的也是服务。</h3><p>总有一天，你也会有累的时候，你也会有老的时候，这时候，你要靠啥呢？就要靠你平时的积累，你10年的积累，可以打倒很多竞争对手，他们再厉害，再怎么样，也很难抵得过你10年的积累，特别是后面5-10年的积累，成果会很明显，前面的1-5年，算是做软件的入门吧，除非你有高人指点，那可能2-3年就可以修成正果，软件在将来还是会值钱的，以为生活会越来越智能化，越来越数字化，软件的需求还是很有前途，最起码未来的10-20年里不用太担心失业问题了。</p><h3 id="10-对程序员来讲，开发思想、架构、代码就是财富，别老丢弃你的劳动成果，要学会保护你的劳动成果。"><a href="#10-对程序员来讲，开发思想、架构、代码就是财富，别老丢弃你的劳动成果，要学会保护你的劳动成果。" class="headerlink" title="10. 对程序员来讲，开发思想、架构、代码就是财富，别老丢弃你的劳动成果，要学会保护你的劳动成果。"></a>10. 对程序员来讲，开发思想、架构、代码就是财富，别老丢弃你的劳动成果，要学会保护你的劳动成果。</h3><p>我大概7-8年前的代码都在手上，经常改进来改进去，维护来维护去，在一定的程度上，让我生活轻松了不少，因为我不用什么都从头来过，我只要痛苦一次，以后就要反复重复利用，软件的价值在于重复利用，而不是每个东西，都从头开发，那永远也是辛苦的程序员，这个生活质量就别提了，不管自己的代码丑还是拿不出手，要学会精心维护，每天改进一点点，每个月一个小进步，每年一个大进步，多年的积累是宝贵的，这个早晚也会给你带来丰厚的收益。</p><h3 id="11-当程序员要防止原地踏步，不是工作年限长了，经验就丰富了，能力就强了，年纪越大工作越难找。"><a href="#11-当程序员要防止原地踏步，不是工作年限长了，经验就丰富了，能力就强了，年纪越大工作越难找。" class="headerlink" title="11. 当程序员要防止原地踏步，不是工作年限长了，经验就丰富了，能力就强了，年纪越大工作越难找。"></a>11. 当程序员要防止原地踏步，不是工作年限长了，经验就丰富了，能力就强了，年纪越大工作越难找。</h3><p>我有一个朋友跟我开玩笑，工作5年的人，可能能力差距会很大，为什么呢？因为第一年他们干的事情都是一样的，都写程序了，2个人可能由于价值观不一样，5年后差距会很大，甚至是大到无法追赶的程度，为啥？因为还有机会的因素在里面，有的人干了5年，还是在原地踏步，天天只会写那些添加、删除、修改的代码。那你得注意了，需要不断的提高自己，才是硬道理。例如你会SQLServer，那要试着学习Oracle， 你是做C/S的，那得需要提高到B/S的，你是做单机软件的，那得需要提高到网络软件，你只关注自己的工作的，需要学会管理，关心他人的工作。你是当程序员的，要试着提高当项目经理、部门经理，公司的总监等等，人有野心有目标才会不断进步，最俗的为了多赚钱，提高工作职位工作岗位，工作单位，也是可以理解的。<br>年纪越大工作越难找，例如3-4千的工作是随便找找，玩一样，但是你30过后，最起码要找月薪上1万的工作，这样的工作是机会也少，一般小公司也给不起，还得找个好公司才可以，好公司又不是天天招聘人，天天缺好的工作岗位，说不好听点儿，小公司的老板才赚多少啊？他来钱也很不容易的，小池塘就不好容得下大鲨鱼了。</p><h3 id="12-当创业的收入比打工还少时，那就别创业，要找比自己能力强的人创业，你不会吃亏。"><a href="#12-当创业的收入比打工还少时，那就别创业，要找比自己能力强的人创业，你不会吃亏。" class="headerlink" title="12.当创业的收入比打工还少时，那就别创业，要找比自己能力强的人创业，你不会吃亏。"></a>12.当创业的收入比打工还少时，那就别创业，要找比自己能力强的人创业，你不会吃亏。</h3><p>创业的收入，比打工还少，那就是瞎扯蛋，恶搞。创业的真正意思并不是要你去吃苦没钱赚，那是忽悠无知的人的。当你创业时的收入，比打工还多，那你可以考虑创业，没有工资什么的，股份啥的，都是瞎扯蛋。<br>不要跟自己能力还弱的人一起创业，那损失最大的，很可能就是你，要创业，也要找比自己强的人一起创业，最起码赚不到钱，还能学到不少。不会有过多的损失。别热血一沸腾就创业了，创业了，也别烧自己的钱，家人的钱，那是很不抗烧的，没几下几十万就烧干了。<br>其实打工，也是创业的开始，每个月都能拿到钱，还可以学到知识，什么公司的股份都是空话，没几个小公司能成功，开起来了也走不了3年就分家了，都忽悠小孩子玩的，除非真的有科技含量或者是客户资源的，否则股份是一文钱不值的，就算创业每个月也按时拿工资才是硬道理。</p><h3 id="13-未来的生活节奏会更快，生活压力会更大，竞争会更激烈，社会服务体系会更完善。"><a href="#13-未来的生活节奏会更快，生活压力会更大，竞争会更激烈，社会服务体系会更完善。" class="headerlink" title="13. 未来的生活节奏会更快，生活压力会更大，竞争会更激烈，社会服务体系会更完善。"></a>13. 未来的生活节奏会更快，生活压力会更大，竞争会更激烈，社会服务体系会更完善。</h3><p>在未来，我们享受良好的服务的同时，也会为别人提供更良好的服务，需要在技能上还是服务质量上的要求会更高更严格。平时要注意提高自己，不要被时代淘汰掉，我从小的朋友，一波又一波被社会无情的淘汰了，很小的时候，我出生在大草原与大山的交界处，我小时候的玩伴，还在大山里，我跟着家人杀出来了，我小学、中学、大学、工作上的、这10年，我一直很坚强的拼搏下来，很不容易的在杭州立住脚了，说实话，参加工作后的十年，也是不断拼搏，不断提高的十年。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="生活" scheme="http://9cat.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>2.1.3Winsock网络编程知识（下）</title>
    <link href="http://9cat.top/2018/07/01/2-1-3Winsock%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://9cat.top/2018/07/01/2-1-3Winsock网络编程知识（下）/</id>
    <published>2018-07-01T07:28:58.000Z</published>
    <updated>2018-07-02T05:20:05.278Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="！上接Winsock网络编程知识（上）！"><a href="#！上接Winsock网络编程知识（上）！" class="headerlink" title="！上接Winsock网络编程知识（上）！"></a>！上接Winsock网络编程知识（上）！</h1><p>sockaddr结构体是为了保持各个特定协议之间的兼容性而设计的。为bind()函数指定的地址和端口时，向sockaddr_in结构体填充相应的内容，而调用函数时应该使用sockaddr结构体。<br>在sockaddr_in结构体中，还有一个结构体in_addr，该结构体在winsock2.h中的定义如下:<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span>&#123;</span></span><br><span class="line"> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> &#123; <span class="title">u_char</span> <span class="title">s_bl</span>,<span class="title">s_b2</span>,<span class="title">s_b3</span>,<span class="title">s_b4</span>;</span> &#125;      S_un_b;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> &#123; <span class="title">u_short</span> <span class="title">s_wl</span>,<span class="title">s_w2</span>;</span> &#125;     S_un_w;</span><br><span class="line"> u_long     S_addr;</span><br><span class="line"> &#125;S_un;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>该结构体是一个共用体S_un，包含2个结构体变量和1u_long类型变量。一般使用的IP地址的数据类型是使用<code>点分十进制</code>表示的,而in_addr结构体中却没有提供用来保存点分十进制表示IP地址的数据类型，只是需要使用转换函数，把<code>点分十进制</code>表示的IP地址转换成in_addr结构体可以接受的类型。这里使用的转换函数是inet_addr(),该函数的定义如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">inet_addr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>  FAR *cp)</span></span>;</span><br></pre></td></tr></table></figure></p><p>该函数是将点分十进制表示的IP地址转换成<code>unsigned long</code>类型的数值。该函数的参数cp是指向点分十进制IP地址的<code>字符指针</code>。同时该函数也是一个<code>逆函数</code>，是将unsigned long型的数值型IP地址转换成点分十进制的IP地址，该函数的定义如下：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">char</span> FAR * inet_ntoa(<span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span></span> <span class="keyword">in</span>);</span><br></pre></td></tr></table></figure></p><p>sockaddr_in结构体中的sin_port表示端口，这个端口需要使用大尾方式字节序存储（也称大端和小端，是两种不同的存储方式。）在intel X86架构下，数值存储方式默认W为小尾方式字节序，而TCP/IP的数值的存储方式都是大尾方式的字节序。为了实现方便的转换，winsock2.h中提供为了方便的函数，即htons()和htonl()两个函数，并且提供了他们的逆函数ntohs()和ntohl()。<br>htons()和htonl()函数的定义分别如下：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u_short htons(<span class="name">u_short</span> hostshort)<span class="comment">;</span></span><br><span class="line">u_long  htonl(<span class="name">u_long</span> hostlong)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>ntohs()和ntohl()函数的定义分别如下：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u_short ntohs(<span class="name">u_short</span> netshort)<span class="comment">;</span></span><br><span class="line">u_long ntohl(<span class="name">u_long</span> netlong)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>这4个函数中，前两个函数是将<code>主机字节序</code>转换成<code>网络字节序</code>，后两个是将<code>网络字节序</code>转换成<code>主机字节序</code>。在有些架构系统下，主机字节序和网络字节序是相同的，那么转换函数不进行任何转换，但是为了代码的移植性，还是会进行转换函数的调用。<br>具体的bind()函数的使用方法如下：<br><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建套接字</span></span><br><span class="line">SOCKET sListen = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="comment">//对sockaddr_in结构体填充地址、端口等信息</span></span><br><span class="line">struct sockaddr_in ServerAddr;</span><br><span class="line">ServerAddr.sin_family = AF_INET;</span><br><span class="line">ServerAddr.sin_addr.S_un.S_addr = inet_addr(<span class="string">"10.10.30.16"</span>);</span><br><span class="line">ServerAddr.sin_port = htons(<span class="number">1234</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定套接字与地址信息</span></span><br><span class="line">bind(sLisent, (SOCKADDR *)&amp;ServerAddr, sizeof(serverAddr));</span><br></pre></td></tr></table></figure></p><p>PS:对于服务器的地址可以指定为INADDR_ANY宏，表示“任意地址”或者“所有地址”。当客户端发起连接时。服务器操作系统接收到客户端的连接，根据网络的配置情况会自动选择一个IP地址和客户端进行通信。<br>当套接字与地址端口信息绑定后，就需要让端口进行监听，当端口进行监听状态以后就可以接受其他主机的连接了。监听端口和接受连接请求的函数分别为listen()和accept()。<br>监听端口的函数定义如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(SOCKET s, <span class="keyword">int</span> backlog)</span></span>;</span><br></pre></td></tr></table></figure></p><p>该函数有两个参数，第1个参数s是指定要监听的套接字描述符，第2个参数是backlog是允许进入请求连接队列的个数，backlog的最大值由系统指定，在winsock2.h中，其最大值由SOMAXCONN表示，该值的定义如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SOMAXCONN     0x7fffffff</span></span><br></pre></td></tr></table></figure></p><p>接受连接请求的函数定义如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SOCKET <span class="title">accept</span>(<span class="params">SOCKET s,<span class="keyword">struct</span> sockaddr FAR *addr, <span class="keyword">int</span> FAR *addrlen</span>)</span>;</span><br></pre></td></tr></table></figure></p><p>该函数从<code>连接请求队列</code>中获取<code>连接信息</code>，创建新的套接字描述符，获取客户端地址。新创建的套接字用于和客户端进行通信。该函数有3个参数，第1个参数s是<code>处于监听套接字描述符</code>，第2个参数addr是一个<code>指向sockaddr结构体的指针</code>，用来返回客户端的地址信息，第3个参数addrlen是一个<code>指向int型的指针变量</code>，用来传入sockaddr结构体的大小。<br>上面介绍的是面向连接的服务器端的函数，完成了一系列服务器应有的基本动作，如下：<br>    首先，bind()函数将套接字描述符与地址信息进行绑定；<br>    其次，listen()函数将套接字描述符置于监听状态；<br>    最后，accept()函数获取连接队列中的连接信息，创建新的套接字描述符，以便与客户端通信。<br>面向连接的客户端只需要完成与服务器的连接这样一个动作就可以实现和服务器的通信了。创建套接字描述符后，使用connect()函数就可以完成与服务器的连接。<br>connet函数的定义如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connet</span>(<span class="params">SOCKES s, <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr FAR *name,<span class="keyword">int</span> namelen</span>)</span>;</span><br></pre></td></tr></table></figure></p><p>该函数的作用是将套接字进行连接。该函数有3个参数，第1个参数表示创建好的<code>套接字描述符</code>，第2个参数name是指向sockaddr结构体的<code>指针</code>，sockaddr结构体中保存了服务器的IP和端口号，第3个参数namelen是指定sockaddr<code>结构体的长度</code>。<br>当客户端使用connect()函数与服务器连接后，客户端和服务器就可以通信了。通信时主要就是信息的发送和接收。这里介绍的函数有两个，分别是send()和recv()。<br>发送函数send()的定义如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recv</span><span class="params">(SOCKET s, <span class="keyword">const</span> <span class="keyword">char</span> FAR *buf, <span class="keyword">int</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure></p><p>该函数有4个参数，第1个<code>参数s</code>是accept()函数返回的套接字描述符，第二个<code>参数buf</code>是发送消息的缓冲区，第3个<code>参数len</code>是缓冲区的长度，第4个<code>参数flags</code>通常赋值为0值。<br>接收函数recv()的定义如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recv</span><span class="params">(SOCKET s,<span class="keyword">char</span> FAR *buf,<span class="keyword">int</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure></p><p>该函数有4个参数，该函数的使用方法和send()函数的使用方法相同。这里不再介绍。</p><h2 id="4-非面向连接协议的函数"><a href="#4-非面向连接协议的函数" class="headerlink" title="4.非面向连接协议的函数"></a>4.非面向连接协议的函数</h2><p>在面向连接的TCP协议中，服务器端将套接字描述符与地址进行绑定后，需要将端口进行<code>监听</code>，等待接受客户端的连接请求，而在客户端则需要连接服务器，完成这些步骤就可以保证面向连接的TCP协议的可靠传输，在调用connect()函数的过程中也完成了TCP的“三次握手”的过程。非面向连接的UDP协议在开发上基本与面向连接TCP相同。在非面向连接的UDP协议开发中服务器端不需要对端口进行监听，也就不需要等待接受客户端的连接请求，而客户端也不需要完成与服务器的连接。中间的“三次握手”过程也就省略了，这样UDP协议现对于TCP协议来讲就显得不可靠，但是效率会更高。（游戏方面一般采用DUP协议）<br>在非面向连接协议开发中，服务器端不再调用listen()、accept()函数，客户端不再需要调用connect()函数。而服务器和客户端的通信换为sendto()和recvfrom()函数即可。<br>sendto函数的定义如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sendto</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> <span class="keyword">char</span> FAR *buf,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">int</span> len,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr FAR *to,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">int</span> tolen</span></span></span><br><span class="line"><span class="function"><span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure></p><p>该函数是用来在UDP协议通信双方进行发送数据的函数，该函数有6个参数，第1个参数s是套接字描述符，第2个参数buf是要发送数据的缓冲区，第3个参数len是指定第2个参数的长度，第4个参数通常赋0值，第5个参数to是一个指向sockaddr结构体的指针，这里给出接收信息的地址信息，第6个参数tolen是指定第5个参数的长度。<br>recvfrom()函数的定义如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recvfrom</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> <span class="keyword">char</span> FAR *buf,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">int</span> len,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr FAR *<span class="keyword">from</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">int</span> FAR *fromlen</span></span></span><br><span class="line"><span class="function"><span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure></p><p>该函数是用来在UDP协议通信双方进行接收数据的函数。该函数的用法与sendto()相同，这里不再介绍。<br>PS：在缓冲区后设置数据的长度是为了防止缓冲区溢出！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="网络编程" scheme="http://9cat.top/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Winsock" scheme="http://9cat.top/tags/Winsock/"/>
    
  </entry>
  
  <entry>
    <title>2.1.3Winsock网络编程知识（上）</title>
    <link href="http://9cat.top/2018/07/01/2-1-3Winsock%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://9cat.top/2018/07/01/2-1-3Winsock网络编程知识（上）/</id>
    <published>2018-07-01T05:39:48.000Z</published>
    <updated>2018-07-02T05:19:21.236Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-Winsock的初始化与释放"><a href="#1-Winsock的初始化与释放" class="headerlink" title="1.Winsock的初始化与释放"></a>1.Winsock的初始化与释放</h2><p>在使用winsock相关函数时需要对Winsock库进行初始化，而在使用完后需要对Winsock库进行释放。</p><h3 id="Winsock库的初始化函数的定义如下："><a href="#Winsock库的初始化函数的定义如下：" class="headerlink" title="Winsock库的初始化函数的定义如下："></a>Winsock库的初始化函数的定义如下：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WSAStartup</span><span class="params">(WORD wVersionRequested, LPWSADATA lpWSAData)</span></span>;</span><br></pre></td></tr></table></figure><p>该函数的第1个参数wVersionRequested是需要初始化的Winsock库的版本号，Winsock库有多个版本号，目前常用的版本是2.2.第二个参数<code>lpWSAData</code>是一个指向WSADATA的指针。该函数的返回值为0，说明该函数调用成功。如果调用失败，则返回其他值。在程序的开始处调用该初始化函数，在程序中就可以使用Winsock相关的所有API函数。</p><h3 id="Winsock库的释放函数的定义"><a href="#Winsock库的释放函数的定义" class="headerlink" title="Winsock库的释放函数的定义"></a>Winsock库的释放函数的定义</h3><p>int WSACleanup(void);<br>该函数没有参数，在程序的结束处直接调用该函数，即可释放Winsock库。</p><h2 id="2-套接字的创建与关闭"><a href="#2-套接字的创建与关闭" class="headerlink" title="2.套接字的创建与关闭"></a>2.套接字的创建与关闭</h2><p>套接字用于根据指定的<code>协议类型</code>来分配一个<code>套接字描述符</code>。该描述符主要用在客户端和服务器端进行通信，当套接字使用完毕时应该关闭套接字以释放资源。创建套接字与关闭套接字的函数为socket()和closesocket()。</p><h3 id="创建套接字的函数定义如下："><a href="#创建套接字的函数定义如下：" class="headerlink" title="创建套接字的函数定义如下："></a>创建套接字的函数定义如下：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SOCKET <span class="title">socket</span><span class="params">(<span class="keyword">int</span> af,<span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure><p>socket()函数共有3个参数，第1个参数af用来指定地址族，在Windows下可以使用的参数有很多个，但是真正可以使用的只有两个，分别说AF_INET和PF_INET。这两个宏在Winsock2.h下的定义相同，分别如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_INET2<span class="comment">/* internetwork:UDP, TCP, etc. */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*Protocol families,same as address families for now</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF_INETAF_INET</span></span><br></pre></td></tr></table></figure></p><p>以上两个定义都摘自Winsock2.h头文件。从定义来看，PF_INET和AF_INET是相同的。看PF_INET宏定义上面的注释，AF表示地址族（Address Family）,而PF表示协议族（Protocol Family）。对于Windows来说，<code>两者相同</code>；对于Unix/Linux来说，两者是<code>不同的</code>。一般情况下，调用socket()函数时应使用<code>PF_INET</code>，而在设置地址时使用<code>AF_INET</code>。<br>sock()函数的第2个参数type是指定新套接字描述符的类型。这里可以使用的值通常有3个，分别是SOCK_STREAM、SOCK_DGRAM和SOCK_RAW，分别表示流套接字、数据包套接字和原始协议接口。<br>socket()函数的第3个参数Protocol用来指定程序所使用的通信协议，这里可以选择使用IPPROTO_TCP、IPPROTO_UDP、IPPROTO_ICMP等协议，这个参数的值是根据<code>第2个参数</code>的值进行选择。第2个参数如果使用<code>SOCK_STREAM</code>，那么第3个参数应该使用<code>IPPROTO_TCP</code>；如果第2个参数使用SOCK_DGRAM，那么第3个参数应该使用IPPROTO_UDP。也就是说，如果第2个参数是SOCK_STREAM或SOCK_DGRAM，那么第3个参数可以默认为0.如果第2个参数指定的是SOCK_RAW，那么第3个参数必须指定，而不能使用0值。<br>socket()函数调用成功返回值为一个新的套接字描述符，如果调用失败，则返回INVALID_SOCKET。调用失败后，想要知道原因，那么紧接着调用WSAGetLastError()函数得到错误码。<br>PS：所有的Winsock函数出错后都可以调用WSAGetLastError()得到错误码。</p><h3 id="关闭套接字的函数定义如下："><a href="#关闭套接字的函数定义如下：" class="headerlink" title="关闭套接字的函数定义如下："></a>关闭套接字的函数定义如下：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">closesocket</span><span class="params">(SOCKET s)</span></span>;</span><br></pre></td></tr></table></figure><p>closesocket()函数是socket()函数创建的套接字描述符。<br>PS：对于WSAStartup()/WSACleanup()和socket()/closesocket()这样的函数，最好保持成对出现。也就是说，在写完一个函数时，立刻写出另外一个函数的调用，以免忘记资源的释放。</p><h2 id="3-面向连接协议的函数"><a href="#3-面向连接协议的函数" class="headerlink" title="3.面向连接协议的函数"></a>3.面向连接协议的函数</h2><p>前面的部分提到了面向连接协议与非面向连接协议所用到的函数是不相同的。这里来介绍面向连接的函数：bind()、listen()、accept()、send()和recv()。这些函数是常用的<code>面向连接的函数</code>，只是一个基础。Winsock库的函数非常多，这里只是寥寥几个而已，下面介绍函数的使用方法。<br>通过socket()函数可以直接创建一个新的套接字描述符，但是它只是一个描述符，为网络的一些资源做准备。要想真正在网络上进行通信，需要<code>本地的地址</code>与<code>本地的端口号信息</code>。当然，本地的地址与端口号信息需要和套接字描述符进行关联，进行绑定。在Winsock函数中，使用bind()函数完成套接字与地址端口信息的绑定。bind()函数的定义如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span>(<span class="params">SOCKET s, <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr FAR *name, <span class="keyword">int</span> namelen</span>)</span>;</span><br></pre></td></tr></table></figure></p><p>该函数有3个参数，第1个参数s是新创建的套接字描述符，也就是用socket()函数创建的描述符，第2个参数name是一个sockaddr的结构体，提供套接字一个地址和端口信息，第3个参数namelen是sockaddr结构体的大小。<br>其中第二个参数sockaddr结构体的定义如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span>&#123;</span></span><br><span class="line">u_short sa_family；   <span class="comment">/* address family */</span></span><br><span class="line"><span class="keyword">char</span>    sa_data[<span class="number">14</span>];  <span class="comment">/* up to 14 bytes of direct address */</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure></p><p>该结构体共有16个字节，在该结构体之前所使用的协议为sockadd_in，该结构体的定义如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockadd_in</span>&#123;</span></span><br><span class="line"><span class="keyword">short</span> sin_family;</span><br><span class="line">u_short sin_port;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">in_add</span> <span class="title">sin_addr</span>;</span></span><br><span class="line"><span class="keyword">char</span>sin_size[<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>！未完待续！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="网络编程" scheme="http://9cat.top/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Winsock" scheme="http://9cat.top/tags/Winsock/"/>
    
  </entry>
  
  <entry>
    <title>2.1.2面向与非面连接协议所使用的函数</title>
    <link href="http://9cat.top/2018/07/01/2-1-2%E9%9D%A2%E5%90%91%E4%B8%8E%E9%9D%9E%E9%9D%A2%E8%BF%9E%E6%8E%A5%E5%8D%8F%E8%AE%AE%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <id>http://9cat.top/2018/07/01/2-1-2面向与非面连接协议所使用的函数/</id>
    <published>2018-07-01T05:14:08.000Z</published>
    <updated>2018-07-20T11:55:09.214Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-面向连接的协议"><a href="#1-面向连接的协议" class="headerlink" title="1.面向连接的协议"></a>1.面向连接的协议</h2><p>在面向连接的协议中，两台计算机之间在进行数据收发前，必须先在两者之间建立一个<code>通信通道</code>，以确保两台计算机之间存在一条路径可以相互沟通。在数据传输完毕之后，切断这条通信通道。该种方式相当于打电话。<br>面向连接的协议使用的是TCP协议，服务器与客户端建立通信信道所需要的基本Winsock函数如下：</p><h3 id="服务器端函数："><a href="#服务器端函数：" class="headerlink" title="服务器端函数："></a>服务器端函数：</h3><p>socket()-&gt;bind-&gt;listen()-&gt;accept()-&gt;send()/recv()-&gt;closesocket()</p><h3 id="客户端函数："><a href="#客户端函数：" class="headerlink" title="客户端函数："></a>客户端函数：</h3><p>socket()-&gt;connet()-&gt;send()/recv()-&gt;closesocket()</p><h2 id="2-非面向连接的协议"><a href="#2-非面向连接的协议" class="headerlink" title="2.非面向连接的协议"></a>2.非面向连接的协议</h2><p>在非面向连接的协议中，发送端只要直接将要发送的数据传出即可，不需要理会接送方是否能够接收到数据。而接受端在接受数据时，也不会响应消息通知发送给发送端。该种方式相当于写信，将写好的信放到信箱中，但是却不能保证收信人真的能够收到这封信。<br>非面向连接使用的是UDP协议，服务器与客户端通信所需要的基本Winsock函数如下：</p><h3 id="服务器端函数：-1"><a href="#服务器端函数：-1" class="headerlink" title="服务器端函数："></a>服务器端函数：</h3><p>socket()-&gt;bind-&gt;sendto()/recvfrom()-&gt;closesocket()</p><h3 id="客户端函数：-1"><a href="#客户端函数：-1" class="headerlink" title="客户端函数："></a>客户端函数：</h3><p>socket()-&gt;sendto()/recvfrom()-&gt;closesocket()</p><h1 id="linux下的sock函数："><a href="#linux下的sock函数：" class="headerlink" title="linux下的sock函数："></a>linux下的sock函数：</h1><p><code>socket(domain,int type,int protocol)</code><br>用于创建一个新的套接字，返回一个表示套接字的文件描述符，错误时返回-1。<br><code>connect(int fd,struct sockaddr *remove_host,socklen_t addr_length)</code><br>将一个套接字（有文件描述符fd指定）连接远程主机。成功返回0，错误返回-1。<br><code>bind(int fd,struct sockaddr *local_addr,socklen_t addr_length)</code><br>将套接字绑定到一个本地地址，以便它可以侦听传入的连接。成功返回0，错误返回-1。<br><code>listen(int fd,int backlog_queue_size)</code><br>侦听传入的连接并将连接请求排队，知道数量达到backlog_queue_size。成功返回0，错误返回-1。<br><code>accept(int fd,sockaddr *remove_host,socklen_t *addr_length)</code><br>在一个绑定的端口接受一个传入的连接。远程主机的地址信息写入remote_host结构中，地址结构的实际大小写入到<em>addr_length中。这个函数返回一个新的套接字文件描述符来标识已经连接的套接字，错误返回-1。<br>`send(int fd,void </em>buffer,size_t n,int flags)<code>从*buffer向套接字fd发送n个字节，返回值为发送的字节数，错误返回-1。</code>recv(int fd,void <em>buffer,size_t n, int flags)`<br>从套接字fd接受n个字节到</em>buffer中，返回值为发送的字节数，错误返回-1。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="网络编程" scheme="http://9cat.top/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数" scheme="http://9cat.top/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>2.1.1网络基础知识</title>
    <link href="http://9cat.top/2018/07/01/2.1.1%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://9cat.top/2018/07/01/2.1.1网络基础知识/</id>
    <published>2018-07-01T03:55:42.000Z</published>
    <updated>2018-07-01T05:38:05.897Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>各种计算机之间通过互联网进行通信主要依靠TCP/IP协议。该协议分为4层，由上到下分别为<code>应用层、传输层、网际层和链路层</code>。<br>TCP/IP协议总是下层为上层协议服务，下层协议的细节对上层协议来说是透明的。TCP/IP协议在每层协议中都定义了非常多的不同的协议，<br>比如网际层的ICMP协议、IGMP协议，传输层的TCP协议、UDP协议等。<br>在众多协议中，最具有代表性的是TCP/IP协议。</p><p>IP协议是“Internet Protocol”的简称，它是计算机网络相互连接进行通信而设计的协议。在IP协议中最重要的就是<code>IP地址</code>，IP地址是用来在网络上唯一标识一台计算机主机的地址。<br>互联网中没有两个<code>机器</code>有相同的IP地址，因此它是用来标识一台网络主机的。所有的IP地址都是32位长，它用点分十进制表示，比如“10.10.30.16”。<br>IP地址指定的不是主机，而是<code>网络接口设备</code>。因此，一台主机有两个网络接口，那么就会有两个IP地址。通常情况下，对于一台普通主机只有一个网络接口设备，也就只有一个IP地址。比如：个人使用的PC通常只有一个IP地址；<br>而对于服务器来说，则会有多个网络接口设备，每个网络接口设备都有一个IP地址，比如WEB服务器可能就会有多个IP地址。</p><p>IP地址被分为5类，分别是A类、B类、C类、D类和E类。各类IP地址范围如下所示。<br><img src="IP.png" alt=""></p><p>传输层有两大协议，分别是TCP协议和UDP协议。<br>TCP协议是“Transmission Control Protocol”的简称，其意思是传输层控制协议。TCP协议是一种面向连接的、可靠的通信协议。TCP协议是IP协议的上层协议，IP协议服务于TCP协议。<br>UDP协议是“User Datagram Protocol”的简称，其意思为用户包协议。UDP协议是一种<code>无连接</code>的传输层协议，提供面向事务的简单<code>不可靠</code>信息传送服务。<br>传输层是为应用层提供服务的，应用层的协议一部分是基于TCP协议的，比如FTP、HTTP。而一部分是基于UDP的，比如DNS协议。IP层提供了<code>IP地址</code>用来标识网络主机，而传输层提供<code>端口</code>来标识主机中的进程。确定了IP地址和端口号，就确定了网络上的主机以主机上通信的进程。<br>传输层提供了标识通信进程的端口号。按照协议划分，端口号分为TCP端口和UDP端口，TCP端口和UDP端口各有65536个。对于应用程序而言，一般使用大于<code>1024</code>的端口号，因为小于1024的端口属于保留端口。Internet上的很多服务都是用小于1024的端口号。为避免冲突，程序员自己编写的应用程序不要使用小于1024的端口号。同一协议的端口不能冲突，比如Web服务器占用主机TCP协议的80端口，那么另外的程序就不可以再使用TCP协议的80端口。<br>常见的端口号如下图所示。<br><img src="port_number.png" alt=""><br>除了小于1024端口号外，还有一些比较有名的端口号，比如MY SQL Server的端口号是1433，Windows的远程桌面端口号是3389等。程序员在编写自己的网络应用程序时，要避免与这些常用端口冲突。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="网络编程" scheme="http://9cat.top/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="网络编程" scheme="http://9cat.top/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>大O记法</title>
    <link href="http://9cat.top/2018/07/01/%E5%A4%A7O%E8%AE%B0%E6%B3%95/"/>
    <id>http://9cat.top/2018/07/01/大O记法/</id>
    <published>2018-07-01T03:41:42.000Z</published>
    <updated>2018-07-01T03:42:28.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="大O记法"><a href="#大O记法" class="headerlink" title="大O记法"></a>大O记法</h1><h3 id="C-的大O记法是算法的时间复杂度表达公式。简单的说大O记法可以告诉你一个算法耗费的时间长度同算法所处理的数据量大小的关系。大O记法只是一个概念性的或定性的记号，不能通过它来真正计算一个算法所耗费的精确时长。"><a href="#C-的大O记法是算法的时间复杂度表达公式。简单的说大O记法可以告诉你一个算法耗费的时间长度同算法所处理的数据量大小的关系。大O记法只是一个概念性的或定性的记号，不能通过它来真正计算一个算法所耗费的精确时长。" class="headerlink" title="C++的大O记法是算法的时间复杂度表达公式。简单的说大O记法可以告诉你一个算法耗费的时间长度同算法所处理的数据量大小的关系。大O记法只是一个概念性的或定性的记号，不能通过它来真正计算一个算法所耗费的精确时长。"></a>C++的<strong>大O记法</strong>是算法的时间复杂度表达公式。简单的说<code>大O记法</code>可以告诉你一个算法耗费的时间长度同算法所处理的数据量大小的关系。大O记法只是一个概念性的或定性的记号，不能通过它来真正计算一个算法所耗费的精确时长。</h3><h3 id="O-1-算法只花费一个单位时间长度的时间。同所处理的数据量大小没有关系（常量时间）。"><a href="#O-1-算法只花费一个单位时间长度的时间。同所处理的数据量大小没有关系（常量时间）。" class="headerlink" title="O(1) 算法只花费一个单位时间长度的时间。同所处理的数据量大小没有关系（常量时间）。"></a><code>O(1)</code> 算法只花费一个单位时间长度的时间。同所处理的数据量大小没有关系（常量时间）。</h3><h3 id="“一个单位时间长度”没有定义为1秒，1天，还是1微妙，完全随意指定。大约同处理一个数据项的时长相同。"><a href="#“一个单位时间长度”没有定义为1秒，1天，还是1微妙，完全随意指定。大约同处理一个数据项的时长相同。" class="headerlink" title="“一个单位时间长度”没有定义为1秒，1天，还是1微妙，完全随意指定。大约同处理一个数据项的时长相同。"></a>“一个单位时间长度”没有定义为1秒，1天，还是1微妙，完全随意指定。大约同处理一个数据项的时长相同。</h3><h3 id="考虑一个数组，按照数组下标的到一个元素的引用"><a href="#考虑一个数组，按照数组下标的到一个元素的引用" class="headerlink" title="考虑一个数组，按照数组下标的到一个元素的引用"></a>考虑一个数组，按照数组下标的到一个元素的引用</h3><h3 id="int-arr-100"><a href="#int-arr-100" class="headerlink" title="int arr[100];"></a>int arr[100];</h3><h3 id="int-x-arr-88-这个算法就是O-1-的"><a href="#int-x-arr-88-这个算法就是O-1-的" class="headerlink" title="int x = arr[88]; //这个算法就是O(1)的"></a>int x = arr[88]; //这个算法就是<code>O(1)</code>的</h3><h3 id="O-1-是最爽的，哪怕有1亿条数据还是1条数据，算法所费时间是常量。"><a href="#O-1-是最爽的，哪怕有1亿条数据还是1条数据，算法所费时间是常量。" class="headerlink" title="O(1)是最爽的，哪怕有1亿条数据还是1条数据，算法所费时间是常量。"></a>O(1)是最爽的，哪怕有1亿条数据还是1条数据，算法所费时间是常量。</h3><h3 id="O-N-算法只花费N个单位时间长度的时间。数据量大小同算法所花费时长成正比例"><a href="#O-N-算法只花费N个单位时间长度的时间。数据量大小同算法所花费时长成正比例" class="headerlink" title="O(N) 算法只花费N个单位时间长度的时间。数据量大小同算法所花费时长成正比例"></a><code>O(N)</code> 算法只花费N个单位时间长度的时间。数据量大小同算法所花费时长成正比例</h3><h3 id="考虑一个list链表"><a href="#考虑一个list链表" class="headerlink" title="考虑一个list链表"></a>考虑一个list链表</h3><h3 id="list-remove-88-把第88个元素删除。这个算法就是O-N-的"><a href="#list-remove-88-把第88个元素删除。这个算法就是O-N-的" class="headerlink" title="list.remove( 88 ); //把第88个元素删除。这个算法就是O(N)的"></a>list.remove( 88 ); //把第88个元素删除。这个算法就是O(N)的</h3><h3 id="O-N-是最不爽的，假设有1亿条数据，算法就要花费1亿个时间单位的时长。"><a href="#O-N-是最不爽的，假设有1亿条数据，算法就要花费1亿个时间单位的时长。" class="headerlink" title="O(N)是最不爽的，假设有1亿条数据，算法就要花费1亿个时间单位的时长。"></a>O(N)是最不爽的，假设有1亿条数据，算法就要花费1亿个时间单位的时长。</h3><h3 id="O-logN-算法只花费logN个单位时间长度的时间。"><a href="#O-logN-算法只花费logN个单位时间长度的时间。" class="headerlink" title="O(logN) 算法只花费logN个单位时间长度的时间。"></a>O(logN) 算法只花费logN个单位时间长度的时间。</h3><h3 id="logN是取对数，可以简单的理解为取以2为底数，N的对数。例如log65536-16-因为2-16-65536"><a href="#logN是取对数，可以简单的理解为取以2为底数，N的对数。例如log65536-16-因为2-16-65536" class="headerlink" title="logN是取对数，可以简单的理解为取以2为底数，N的对数。例如log65536=16 (因为2^16=65536)"></a>logN是取对数，可以简单的理解为取以2为底数，N的对数。例如log65536=16 (因为2^16=65536)</h3><h3 id="对数是把一个天文数字般的整数映射成一个小小的整数的数学工具。"><a href="#对数是把一个天文数字般的整数映射成一个小小的整数的数学工具。" class="headerlink" title="对数是把一个天文数字般的整数映射成一个小小的整数的数学工具。"></a>对数是把一个天文数字般的整数映射成一个小小的整数的数学工具。</h3><h3 id="考虑一个已排序的数组，用“折半法”查找，算法的时间特性就是O-logN-的。"><a href="#考虑一个已排序的数组，用“折半法”查找，算法的时间特性就是O-logN-的。" class="headerlink" title="考虑一个已排序的数组，用“折半法”查找，算法的时间特性就是O(logN)的。"></a>考虑一个已排序的数组，用“折半法”查找，算法的时间特性就是O(logN)的。</h3><h3 id="O-log-一个亿-约等于19个单位时间的时长。"><a href="#O-log-一个亿-约等于19个单位时间的时长。" class="headerlink" title="O(log(一个亿))约等于19个单位时间的时长。"></a>O(log(一个亿))约等于19个单位时间的时长。</h3><h3 id="O-logN-也不一定是以2为底的，也可能是以3为底的，这都无所谓。"><a href="#O-logN-也不一定是以2为底的，也可能是以3为底的，这都无所谓。" class="headerlink" title="O(logN)也不一定是以2为底的，也可能是以3为底的，这都无所谓。"></a>O(logN)也不一定是以2为底的，也可能是以3为底的，这都无所谓。</h3><h3 id="算法在应用于局部小数据量时，可能因为内存的申请，释放，初始化等原因，观察者发现不符合大O记法表示的特性。"><a href="#算法在应用于局部小数据量时，可能因为内存的申请，释放，初始化等原因，观察者发现不符合大O记法表示的特性。" class="headerlink" title="算法在应用于局部小数据量时，可能因为内存的申请，释放，初始化等原因，观察者发现不符合大O记法表示的特性。"></a>算法在应用于局部小数据量时，可能因为内存的申请，释放，初始化等原因，观察者发现不符合大O记法表示的特性。</h3><h3 id="但是在长期的运行，经过大数据量的考验后，那些干扰因素逐渐沦为次要因素，观察者可以发现算法的却符合某种自己固有的时间特性。"><a href="#但是在长期的运行，经过大数据量的考验后，那些干扰因素逐渐沦为次要因素，观察者可以发现算法的却符合某种自己固有的时间特性。" class="headerlink" title="但是在长期的运行，经过大数据量的考验后，那些干扰因素逐渐沦为次要因素，观察者可以发现算法的却符合某种自己固有的时间特性。"></a>但是在长期的运行，经过大数据量的考验后，那些干扰因素逐渐沦为次要因素，观察者可以发现算法的却符合某种自己固有的时间特性。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="算法和数据结构" scheme="http://9cat.top/tags/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP调试工具</title>
    <link href="http://9cat.top/2018/06/24/IP/"/>
    <id>http://9cat.top/2018/06/24/IP/</id>
    <published>2018-06-24T11:58:55.000Z</published>
    <updated>2018-06-24T13:34:06.992Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="dos下的一些命令"><a href="#dos下的一些命令" class="headerlink" title="dos下的一些命令"></a>dos下的一些命令</h1><p>netstat -s -p tcp/udp/icmp/ip  </p><p>ping -l 65500 -t 192.168.1.1  #死亡之ping  </p><p>for /L %i IN (1,1,254) DO ping -w 2 -n 1 192.168.1.%i  #批处理ping  </p><p>for /L %i IN (1,1,254) DO ping -w 2 -n 1 192.168.2.%i  </p><p>nbtstat -a 192.168.1.106   探测主机名  </p><p>add portopening protocol =all port=135 name=关闭135端口 mode=enable SCOP=Subnet  </p><p>netsh advfirewall firewall  </p><p>add portopening protocol =tcp port=55555 name重要服务 mode=enable  </p><p>delete portopening protocol =tcp port=55555 interface=重要服务  </p><p>delete portopening TCP 135</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vim</title>
    <link href="http://9cat.top/2018/06/24/vim/"/>
    <id>http://9cat.top/2018/06/24/vim/</id>
    <published>2018-06-24T09:28:46.000Z</published>
    <updated>2018-06-24T09:33:48.185Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>vim<br>命令行模式，插入模式，末行模式<br>命令模式，不能输入字符<br><code>移动命令：</code><br>j        向下移动光标<br>k        向上移动光标<br>h        向左移动光标<br>l        向右移动光标<br>gg         文件顶部<br>G          文件末尾<br>数字gg 移动到数字对应行<br>数字G  移动到数字对应行<br>[        移动到段落首<br>]        移动到段落尾</p><p>Ctrl+b  向上翻页<br>Ctrl+f  向下翻页<br>H         屏幕顶部<br>M         屏幕中间<br>L         屏幕顶部</p><p>按i进入插入模式，可输入任意字符<br>按ESC退出插入模式<br>按：进入末行模式</p><p><code>撤销和取消撤销</code><br>u     ctrl+r</p><p><code>删除</code><br>x<br>n+x （n为数字）    删除N个字符<br>dd              删除光标所在行<br>D               一直删除至行尾<br>dw              删除选中之后直到空格<br>d+数字G          删除选中行到指定行</p><p><code>可视模式</code><br>按v：可视模式，可选中代码<br>按V：行<br>Ctrl+v：块<br>（可结合移动命令，例如：v+gg）</p><p>复制粘贴命令：<br>yy:复制整行代码<br>p:粘贴<br>yy19p  复制19行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>memory</title>
    <link href="http://9cat.top/2018/06/24/memory/"/>
    <id>http://9cat.top/2018/06/24/memory/</id>
    <published>2018-06-24T09:28:46.000Z</published>
    <updated>2018-07-01T01:37:00.402Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在C语言中，与其他编译语言一样，编译代码放入text段，而变量驻留在其他段中。<br>究竟是哪个存储器变量取决于变量如何定义。定义在所有函数之外的变量被认为是全局变量。<br>在任何变量前增加关键字static都会使该变量成为静态变量。<br>如果使用数据将静态变量或全局变量初始化了，它们就会存储在data内存段中，否则，这些变量就会存储在bss内存段中。<br>首先，必须使用用户名为malloc()的内存分配函数对对堆内存段中的内存进行分配。通常使用指针来引用堆中的内存。<br>最后，其余的函数变量存储在堆栈内存中。因为堆栈可以包含许多不同的栈帧，所以栈帧变量可以在不同的函数上下文内保持唯一。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> global_var;</span><br><span class="line"><span class="keyword">int</span> global_initialized_var=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> stack_var;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the function's stack_var is at addres 0x%08x\n"</span>,&amp;stack_var);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> stack_var;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> static_initialized_var=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> static_var;</span><br><span class="line"><span class="keyword">int</span> *heap_var_ptr;</span><br><span class="line"></span><br><span class="line">heap_var_ptr=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"global_initialized_var is at addres 0x%08x\n"</span>,&amp;global_initialized_var);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"static_initialized_var is at addres 0x%08x\n\n"</span>,&amp;static_initialized_var);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"static_var is at addres 0x%08x\n"</span>,&amp;static_var);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"global_var is at addres 0x%08x\n\n"</span>,&amp;global_var);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"heap_var is at addres 0x%08x\n\n"</span>,heap_var_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"static_var is addres 0x%08x\n"</span>,&amp;stack_var);</span><br><span class="line">function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="memory.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>多线程编程基础</title>
    <link href="http://9cat.top/2018/06/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://9cat.top/2018/06/20/多线程编程基础/</id>
    <published>2018-06-20T09:45:55.000Z</published>
    <updated>2018-06-24T10:20:23.577Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ThreadProc \r\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hThread = CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>,ThreadProc,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">WaitForSingleObject(hThread, INFINITE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"main \r\n"</span>);</span><br><span class="line"></span><br><span class="line">CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="programme" scheme="http://9cat.top/tags/programme/"/>
    
  </entry>
  
  <entry>
    <title>第一个win32汇编程序</title>
    <link href="http://9cat.top/2018/06/12/%E7%AC%AC%E4%B8%80%E4%B8%AAwin32%E6%B1%87%E7%BC%96%E7%A8%8B%E5%BA%8F/"/>
    <id>http://9cat.top/2018/06/12/第一个win32汇编程序/</id>
    <published>2018-06-12T11:58:55.000Z</published>
    <updated>2018-06-22T13:01:28.665Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Win32编程"><a href="#Win32编程" class="headerlink" title="Win32编程"></a>Win32编程</h1><p><code>This is code</code></p><p>;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>        .386<br>        .model flat,stdcall<br>        option casemap:none<br>;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>;文件定义<br>;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>include        windows.inc<br>include     user32.inc<br>includelib     user32.lib<br>include     kernel32.inc<br>includelib    kernel32.lib<br>;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>;数据段<br>        .data<br>szCaption    db    ‘来自酒猫’,0<br>szText        db    ‘Hello World’,0<br>szText_OK    db    ‘您刚点了OK按钮’<br>szCANCEL    db    ‘您刚点了CANCEL按钮’</p><p>;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>;代码段<br>;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>        .code<br>start:<br>        invoke    MessageBox,NULL,offset szCaption,MB_OKCANCEL or<br>        MB_INCONQUESTION<br>        cmp eax, IDOK<br>        je OK<br>        invoke    MessageBox,NULL,offset szCANCEL,offset szCaption,MB_OK<br>        jmp GO<br>OK:        invoke    MessageBox,NULL,offset szOK,offset szCaption,MB_OK<br>GO:        invoke    ExitProcess,NILL<br>;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>        end start<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Makefile</span><br><span class="line">-------</span><br></pre></td></tr></table></figure></p><p>EXE = hello.exe        #指定输出文件<br>OBJS = hello.obj        #需要的目标文件<br>RES = Fishc.res        #需要的资源文件</p><p>LINK_FLAG = /subsystem:windows    #连接选项<br>ML_FLAG = /c /coff        #编译选项</p><p>$(EXE): $(OBJS) $(RES)<br>    Link $(LINK_FLAG) $(OBJS) $(RES)</p><p>.asm.obj:<br>    ml $(ML_FLAG) $&lt;<br>.rc.res:<br>    rc $&lt;</p><p>clean:<br>    del <em>.obj<br>    del </em>.res</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>删除所有分区共享批处理</title>
    <link href="http://9cat.top/2018/05/28/%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E5%88%86%E5%8C%BA%E5%85%B1%E4%BA%AB/"/>
    <id>http://9cat.top/2018/05/28/删除所有分区共享/</id>
    <published>2018-05-28T11:58:55.000Z</published>
    <updated>2018-06-21T00:02:50.760Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="删除所有分区共享"><a href="#删除所有分区共享" class="headerlink" title="删除所有分区共享"></a>删除所有分区共享</h1><ul><li>先列举存在的分区，然后再逐个删除以分区命名的共享；</li><li>通过修改注册表防止admin$共享在下次开机时重新加载；</li><li>IPC$共享需要administritor权限才能删除</li></ul><p><code>This is code</code></p><pre><code>@echo offtitle 默认共享删除器echo.echo ----------------------------------------------echo.echo 开始删除每个分区下的默认共享echo.for %%a in (C D E F G H I J K L M N O P Q R S T U V W X Y Z) do @(    if exist %%a:\nul (        net share %%a$ /delete&gt;nul 2&gt;nul &amp;&amp; echo 成功删除名为 %%a$的默认共享 || echo 名为 %%a$的默认共享不存在        ))net share admin$ /delete&gt;nul 2&gt;nul &amp;&amp; echo 成功删除名为 admin$的默认共享 || echo 名为 admin$的默认共享不存在echo.echo ----------------------------------------------echo.net stop Server&gt;nul 2&gt;nul &amp;&amp; echo Server服务已停止net start Server&gt;nul 2&gt;nul &amp;&amp; echo Server服务已启动echo.echo ----------------------------------------------echo.echo 修改注册表以更改系统默认设置echo.echo 正在创建注册表文件echo Windows Registry Editor Version 5.00&gt; c:\delshare.reg:: 通过修改注册表禁止admin$共享，以防重启后再次加载echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\lanmanserver\parameters]&gt;&gt;c:\delshare.regecho &quot;AutoShareWks&quot;=dword:00000000&gt;&gt; c:\delshare.regecho &quot;AutoShareServer&quot;=dword:00000000&gt;&gt; c:\delshare.reg::删除IPC$共享，本功能需要administrator权限才能成功删除echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa]&gt;&gt; c:delshare.regecho &quot;restrictanonymous&quot;=dword:00000001&gt;&gt; c:\delshare.regecho 正在导入注册表以更改系统默认设置regedit /s c:\delshare.regdel c:\delshare.reg &amp;&amp; echo 临时文件已经删除echo.echo ----------------------------------------------echo.echo 程序已经成功删除所有的默认共享echo.echo 按任意键退出...pause&gt;nul</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
</feed>
