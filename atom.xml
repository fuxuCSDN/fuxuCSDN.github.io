<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Cat</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://9cat.top/"/>
  <updated>2018-07-01T05:34:25.436Z</updated>
  <id>http://9cat.top/</id>
  
  <author>
    <name>water</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2.1.2面向与非面连接协议所使用的函数</title>
    <link href="http://9cat.top/2018/07/01/2-1-2%E9%9D%A2%E5%90%91%E4%B8%8E%E9%9D%9E%E9%9D%A2%E8%BF%9E%E6%8E%A5%E5%8D%8F%E8%AE%AE%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <id>http://9cat.top/2018/07/01/2-1-2面向与非面连接协议所使用的函数/</id>
    <published>2018-07-01T05:14:08.000Z</published>
    <updated>2018-07-01T05:34:25.436Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-面向连接的协议"><a href="#1-面向连接的协议" class="headerlink" title="1.面向连接的协议"></a>1.面向连接的协议</h2><p>在面向连接的协议中，两台计算机之间在进行数据收发前，必须先在两者之间建立一个<code>通信通道</code>，以确保两台计算机之间存在一条路径可以相互沟通。在数据传输完毕之后，切断这条通信通道。该种方式相当于打电话。<br>面向连接的协议使用的是TCP协议，服务器与客户端建立通信信道所需要的基本Winsock函数如下：</p><h3 id="服务器端函数："><a href="#服务器端函数：" class="headerlink" title="服务器端函数："></a>服务器端函数：</h3><p>socket()-&gt;bind-&gt;listen()-&gt;accept()-&gt;send()/recv()-&gt;closesocket()</p><h3 id="客户端函数："><a href="#客户端函数：" class="headerlink" title="客户端函数："></a>客户端函数：</h3><p>socket()-&gt;connet()-&gt;send()/recv()-&gt;closesocket()</p><h2 id="2-非面向连接的协议"><a href="#2-非面向连接的协议" class="headerlink" title="2.非面向连接的协议"></a>2.非面向连接的协议</h2><p>在非面向连接的协议中，发送端只要直接将要发送的数据传出即可，不需要理会接送方是否能够接收到数据。而接受端在接受数据时，也不会响应消息通知发送给发送端。该种方式相当于写信，将写好的信放到信箱中，但是却不能保证收信人真的能够收到这封信。<br>非面向连接使用的是UDP协议，服务器与客户端通信所需要的基本Winsock函数如下：</p><h3 id="服务器端函数：-1"><a href="#服务器端函数：-1" class="headerlink" title="服务器端函数："></a>服务器端函数：</h3><p>socket()-&gt;bind-&gt;sendto()/recvfrom()-&gt;closesocket()</p><h3 id="客户端函数：-1"><a href="#客户端函数：-1" class="headerlink" title="客户端函数："></a>客户端函数：</h3><p>socket()-&gt;sendto()/recvfrom()-&gt;closesocket()</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="网络编程" scheme="http://9cat.top/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数" scheme="http://9cat.top/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>网络基础知识</title>
    <link href="http://9cat.top/2018/07/01/2.1.1%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://9cat.top/2018/07/01/2.1.1网络基础知识/</id>
    <published>2018-07-01T03:55:42.000Z</published>
    <updated>2018-07-01T04:56:56.606Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>各种计算机之间通过互联网进行通信主要依靠TCP/IP协议。该协议分为4层，由上到下分别为<code>应用层、传输层、网际层和链路层</code>。<br>TCP/IP协议总是下层为上层协议服务，下层协议的细节对上层协议来说是透明的。TCP/IP协议在每层协议中都定义了非常多的不同的协议，<br>比如网际层的ICMP协议、IGMP协议，传输层的TCP协议、UDP协议等。<br>在众多协议中，最具有代表性的是TCP/IP协议。</p><p>IP协议是“Internet Protocol”的简称，它是计算机网络相互连接进行通信而设计的协议。在IP协议中最重要的就是<code>IP地址</code>，IP地址是用来在网络上唯一标识一台计算机主机的地址。<br>互联网中没有两个<code>机器</code>有相同的IP地址，因此它是用来标识一台网络主机的。所有的IP地址都是32位长，它用点分十进制表示，比如“10.10.30.16”。<br>IP地址指定的不是主机，而是<code>网络接口设备</code>。因此，一台主机有两个网络接口，那么就会有两个IP地址。通常情况下，对于一台普通主机只有一个网络接口设备，也就只有一个IP地址。比如：个人使用的PC通常只有一个IP地址；<br>而对于服务器来说，则会有多个网络接口设备，每个网络接口设备都有一个IP地址，比如WEB服务器可能就会有多个IP地址。</p><p>IP地址被分为5类，分别是A类、B类、C类、D类和E类。各类IP地址范围如下所示。<br><img src="IP.png" alt=""></p><p>传输层有两大协议，分别是TCP协议和UDP协议。<br>TCP协议是“Transmission Control Protocol”的简称，其意思是传输层控制协议。TCP协议是一种面向连接的、可靠的通信协议。TCP协议是IP协议的上层协议，IP协议服务于TCP协议。<br>UDP协议是“User Datagram Protocol”的简称，其意思为用户包协议。UDP协议是一种<code>无连接</code>的传输层协议，提供面向事务的简单<code>不可靠</code>信息传送服务。<br>传输层是为应用层提供服务的，应用层的协议一部分是基于TCP协议的，比如FTP、HTTP。而一部分是基于UDP的，比如DNS协议。IP层提供了<code>IP地址</code>用来标识网络主机，而传输层提供<code>端口</code>来标识主机中的进程。确定了IP地址和端口号，就确定了网络上的主机以主机上通信的进程。<br>传输层提供了标识通信进程的端口号。按照协议划分，端口号分为TCP端口和UDP端口，TCP端口和UDP端口各有65536个。对于应用程序而言，一般使用大于<code>1024</code>的端口号，因为小于1024的端口属于保留端口。Internet上的很多服务都是用小于1024的端口号。为避免冲突，程序员自己编写的应用程序不要使用小于1024的端口号。同一协议的端口不能冲突，比如Web服务器占用主机TCP协议的80端口，那么另外的程序就不可以再使用TCP协议的80端口。<br>常见的端口号如下图所示。<br><img src="port_number.png" alt=""><br>除了小于1024端口号外，还有一些比较有名的端口号，比如MY SQL Server的端口号是1433，Windows的远程桌面端口号是3389等。程序员在编写自己的网络应用程序时，要避免与这些常用端口冲突。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="网络编程" scheme="http://9cat.top/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="网络编程" scheme="http://9cat.top/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>大O记法</title>
    <link href="http://9cat.top/2018/07/01/%E5%A4%A7O%E8%AE%B0%E6%B3%95/"/>
    <id>http://9cat.top/2018/07/01/大O记法/</id>
    <published>2018-07-01T03:41:42.000Z</published>
    <updated>2018-07-01T03:42:28.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="大O记法"><a href="#大O记法" class="headerlink" title="大O记法"></a>大O记法</h1><h3 id="C-的大O记法是算法的时间复杂度表达公式。简单的说大O记法可以告诉你一个算法耗费的时间长度同算法所处理的数据量大小的关系。大O记法只是一个概念性的或定性的记号，不能通过它来真正计算一个算法所耗费的精确时长。"><a href="#C-的大O记法是算法的时间复杂度表达公式。简单的说大O记法可以告诉你一个算法耗费的时间长度同算法所处理的数据量大小的关系。大O记法只是一个概念性的或定性的记号，不能通过它来真正计算一个算法所耗费的精确时长。" class="headerlink" title="C++的大O记法是算法的时间复杂度表达公式。简单的说大O记法可以告诉你一个算法耗费的时间长度同算法所处理的数据量大小的关系。大O记法只是一个概念性的或定性的记号，不能通过它来真正计算一个算法所耗费的精确时长。"></a>C++的<strong>大O记法</strong>是算法的时间复杂度表达公式。简单的说<code>大O记法</code>可以告诉你一个算法耗费的时间长度同算法所处理的数据量大小的关系。大O记法只是一个概念性的或定性的记号，不能通过它来真正计算一个算法所耗费的精确时长。</h3><h3 id="O-1-算法只花费一个单位时间长度的时间。同所处理的数据量大小没有关系（常量时间）。"><a href="#O-1-算法只花费一个单位时间长度的时间。同所处理的数据量大小没有关系（常量时间）。" class="headerlink" title="O(1) 算法只花费一个单位时间长度的时间。同所处理的数据量大小没有关系（常量时间）。"></a><code>O(1)</code> 算法只花费一个单位时间长度的时间。同所处理的数据量大小没有关系（常量时间）。</h3><h3 id="“一个单位时间长度”没有定义为1秒，1天，还是1微妙，完全随意指定。大约同处理一个数据项的时长相同。"><a href="#“一个单位时间长度”没有定义为1秒，1天，还是1微妙，完全随意指定。大约同处理一个数据项的时长相同。" class="headerlink" title="“一个单位时间长度”没有定义为1秒，1天，还是1微妙，完全随意指定。大约同处理一个数据项的时长相同。"></a>“一个单位时间长度”没有定义为1秒，1天，还是1微妙，完全随意指定。大约同处理一个数据项的时长相同。</h3><h3 id="考虑一个数组，按照数组下标的到一个元素的引用"><a href="#考虑一个数组，按照数组下标的到一个元素的引用" class="headerlink" title="考虑一个数组，按照数组下标的到一个元素的引用"></a>考虑一个数组，按照数组下标的到一个元素的引用</h3><h3 id="int-arr-100"><a href="#int-arr-100" class="headerlink" title="int arr[100];"></a>int arr[100];</h3><h3 id="int-x-arr-88-这个算法就是O-1-的"><a href="#int-x-arr-88-这个算法就是O-1-的" class="headerlink" title="int x = arr[88]; //这个算法就是O(1)的"></a>int x = arr[88]; //这个算法就是<code>O(1)</code>的</h3><h3 id="O-1-是最爽的，哪怕有1亿条数据还是1条数据，算法所费时间是常量。"><a href="#O-1-是最爽的，哪怕有1亿条数据还是1条数据，算法所费时间是常量。" class="headerlink" title="O(1)是最爽的，哪怕有1亿条数据还是1条数据，算法所费时间是常量。"></a>O(1)是最爽的，哪怕有1亿条数据还是1条数据，算法所费时间是常量。</h3><h3 id="O-N-算法只花费N个单位时间长度的时间。数据量大小同算法所花费时长成正比例"><a href="#O-N-算法只花费N个单位时间长度的时间。数据量大小同算法所花费时长成正比例" class="headerlink" title="O(N) 算法只花费N个单位时间长度的时间。数据量大小同算法所花费时长成正比例"></a><code>O(N)</code> 算法只花费N个单位时间长度的时间。数据量大小同算法所花费时长成正比例</h3><h3 id="考虑一个list链表"><a href="#考虑一个list链表" class="headerlink" title="考虑一个list链表"></a>考虑一个list链表</h3><h3 id="list-remove-88-把第88个元素删除。这个算法就是O-N-的"><a href="#list-remove-88-把第88个元素删除。这个算法就是O-N-的" class="headerlink" title="list.remove( 88 ); //把第88个元素删除。这个算法就是O(N)的"></a>list.remove( 88 ); //把第88个元素删除。这个算法就是O(N)的</h3><h3 id="O-N-是最不爽的，假设有1亿条数据，算法就要花费1亿个时间单位的时长。"><a href="#O-N-是最不爽的，假设有1亿条数据，算法就要花费1亿个时间单位的时长。" class="headerlink" title="O(N)是最不爽的，假设有1亿条数据，算法就要花费1亿个时间单位的时长。"></a>O(N)是最不爽的，假设有1亿条数据，算法就要花费1亿个时间单位的时长。</h3><h3 id="O-logN-算法只花费logN个单位时间长度的时间。"><a href="#O-logN-算法只花费logN个单位时间长度的时间。" class="headerlink" title="O(logN) 算法只花费logN个单位时间长度的时间。"></a>O(logN) 算法只花费logN个单位时间长度的时间。</h3><h3 id="logN是取对数，可以简单的理解为取以2为底数，N的对数。例如log65536-16-因为2-16-65536"><a href="#logN是取对数，可以简单的理解为取以2为底数，N的对数。例如log65536-16-因为2-16-65536" class="headerlink" title="logN是取对数，可以简单的理解为取以2为底数，N的对数。例如log65536=16 (因为2^16=65536)"></a>logN是取对数，可以简单的理解为取以2为底数，N的对数。例如log65536=16 (因为2^16=65536)</h3><h3 id="对数是把一个天文数字般的整数映射成一个小小的整数的数学工具。"><a href="#对数是把一个天文数字般的整数映射成一个小小的整数的数学工具。" class="headerlink" title="对数是把一个天文数字般的整数映射成一个小小的整数的数学工具。"></a>对数是把一个天文数字般的整数映射成一个小小的整数的数学工具。</h3><h3 id="考虑一个已排序的数组，用“折半法”查找，算法的时间特性就是O-logN-的。"><a href="#考虑一个已排序的数组，用“折半法”查找，算法的时间特性就是O-logN-的。" class="headerlink" title="考虑一个已排序的数组，用“折半法”查找，算法的时间特性就是O(logN)的。"></a>考虑一个已排序的数组，用“折半法”查找，算法的时间特性就是O(logN)的。</h3><h3 id="O-log-一个亿-约等于19个单位时间的时长。"><a href="#O-log-一个亿-约等于19个单位时间的时长。" class="headerlink" title="O(log(一个亿))约等于19个单位时间的时长。"></a>O(log(一个亿))约等于19个单位时间的时长。</h3><h3 id="O-logN-也不一定是以2为底的，也可能是以3为底的，这都无所谓。"><a href="#O-logN-也不一定是以2为底的，也可能是以3为底的，这都无所谓。" class="headerlink" title="O(logN)也不一定是以2为底的，也可能是以3为底的，这都无所谓。"></a>O(logN)也不一定是以2为底的，也可能是以3为底的，这都无所谓。</h3><h3 id="算法在应用于局部小数据量时，可能因为内存的申请，释放，初始化等原因，观察者发现不符合大O记法表示的特性。"><a href="#算法在应用于局部小数据量时，可能因为内存的申请，释放，初始化等原因，观察者发现不符合大O记法表示的特性。" class="headerlink" title="算法在应用于局部小数据量时，可能因为内存的申请，释放，初始化等原因，观察者发现不符合大O记法表示的特性。"></a>算法在应用于局部小数据量时，可能因为内存的申请，释放，初始化等原因，观察者发现不符合大O记法表示的特性。</h3><h3 id="但是在长期的运行，经过大数据量的考验后，那些干扰因素逐渐沦为次要因素，观察者可以发现算法的却符合某种自己固有的时间特性。"><a href="#但是在长期的运行，经过大数据量的考验后，那些干扰因素逐渐沦为次要因素，观察者可以发现算法的却符合某种自己固有的时间特性。" class="headerlink" title="但是在长期的运行，经过大数据量的考验后，那些干扰因素逐渐沦为次要因素，观察者可以发现算法的却符合某种自己固有的时间特性。"></a>但是在长期的运行，经过大数据量的考验后，那些干扰因素逐渐沦为次要因素，观察者可以发现算法的却符合某种自己固有的时间特性。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="算法和数据结构" scheme="http://9cat.top/tags/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP调试工具</title>
    <link href="http://9cat.top/2018/06/24/IP/"/>
    <id>http://9cat.top/2018/06/24/IP/</id>
    <published>2018-06-24T11:58:55.000Z</published>
    <updated>2018-06-24T13:34:06.992Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="dos下的一些命令"><a href="#dos下的一些命令" class="headerlink" title="dos下的一些命令"></a>dos下的一些命令</h1><p>netstat -s -p tcp/udp/icmp/ip  </p><p>ping -l 65500 -t 192.168.1.1  #死亡之ping  </p><p>for /L %i IN (1,1,254) DO ping -w 2 -n 1 192.168.1.%i  #批处理ping  </p><p>for /L %i IN (1,1,254) DO ping -w 2 -n 1 192.168.2.%i  </p><p>nbtstat -a 192.168.1.106   探测主机名  </p><p>add portopening protocol =all port=135 name=关闭135端口 mode=enable SCOP=Subnet  </p><p>netsh advfirewall firewall  </p><p>add portopening protocol =tcp port=55555 name重要服务 mode=enable  </p><p>delete portopening protocol =tcp port=55555 interface=重要服务  </p><p>delete portopening TCP 135</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>memory</title>
    <link href="http://9cat.top/2018/06/24/memory/"/>
    <id>http://9cat.top/2018/06/24/memory/</id>
    <published>2018-06-24T09:28:46.000Z</published>
    <updated>2018-07-01T01:37:00.402Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在C语言中，与其他编译语言一样，编译代码放入text段，而变量驻留在其他段中。<br>究竟是哪个存储器变量取决于变量如何定义。定义在所有函数之外的变量被认为是全局变量。<br>在任何变量前增加关键字static都会使该变量成为静态变量。<br>如果使用数据将静态变量或全局变量初始化了，它们就会存储在data内存段中，否则，这些变量就会存储在bss内存段中。<br>首先，必须使用用户名为malloc()的内存分配函数对对堆内存段中的内存进行分配。通常使用指针来引用堆中的内存。<br>最后，其余的函数变量存储在堆栈内存中。因为堆栈可以包含许多不同的栈帧，所以栈帧变量可以在不同的函数上下文内保持唯一。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> global_var;</span><br><span class="line"><span class="keyword">int</span> global_initialized_var=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> stack_var;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the function's stack_var is at addres 0x%08x\n"</span>,&amp;stack_var);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> stack_var;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> static_initialized_var=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> static_var;</span><br><span class="line"><span class="keyword">int</span> *heap_var_ptr;</span><br><span class="line"></span><br><span class="line">heap_var_ptr=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"global_initialized_var is at addres 0x%08x\n"</span>,&amp;global_initialized_var);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"static_initialized_var is at addres 0x%08x\n\n"</span>,&amp;static_initialized_var);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"static_var is at addres 0x%08x\n"</span>,&amp;static_var);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"global_var is at addres 0x%08x\n\n"</span>,&amp;global_var);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"heap_var is at addres 0x%08x\n\n"</span>,heap_var_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"static_var is addres 0x%08x\n"</span>,&amp;stack_var);</span><br><span class="line">function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="memory.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vim</title>
    <link href="http://9cat.top/2018/06/24/vim/"/>
    <id>http://9cat.top/2018/06/24/vim/</id>
    <published>2018-06-24T09:28:46.000Z</published>
    <updated>2018-06-24T09:33:48.185Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>vim<br>命令行模式，插入模式，末行模式<br>命令模式，不能输入字符<br><code>移动命令：</code><br>j        向下移动光标<br>k        向上移动光标<br>h        向左移动光标<br>l        向右移动光标<br>gg         文件顶部<br>G          文件末尾<br>数字gg 移动到数字对应行<br>数字G  移动到数字对应行<br>[        移动到段落首<br>]        移动到段落尾</p><p>Ctrl+b  向上翻页<br>Ctrl+f  向下翻页<br>H         屏幕顶部<br>M         屏幕中间<br>L         屏幕顶部</p><p>按i进入插入模式，可输入任意字符<br>按ESC退出插入模式<br>按：进入末行模式</p><p><code>撤销和取消撤销</code><br>u     ctrl+r</p><p><code>删除</code><br>x<br>n+x （n为数字）    删除N个字符<br>dd              删除光标所在行<br>D               一直删除至行尾<br>dw              删除选中之后直到空格<br>d+数字G          删除选中行到指定行</p><p><code>可视模式</code><br>按v：可视模式，可选中代码<br>按V：行<br>Ctrl+v：块<br>（可结合移动命令，例如：v+gg）</p><p>复制粘贴命令：<br>yy:复制整行代码<br>p:粘贴<br>yy19p  复制19行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>多线程编程基础</title>
    <link href="http://9cat.top/2018/06/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://9cat.top/2018/06/20/多线程编程基础/</id>
    <published>2018-06-20T09:45:55.000Z</published>
    <updated>2018-06-24T10:20:23.577Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ThreadProc \r\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hThread = CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>,ThreadProc,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">WaitForSingleObject(hThread, INFINITE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"main \r\n"</span>);</span><br><span class="line"></span><br><span class="line">CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="programme" scheme="http://9cat.top/tags/programme/"/>
    
  </entry>
  
  <entry>
    <title>第一个win32汇编程序</title>
    <link href="http://9cat.top/2018/06/12/%E7%AC%AC%E4%B8%80%E4%B8%AAwin32%E6%B1%87%E7%BC%96%E7%A8%8B%E5%BA%8F/"/>
    <id>http://9cat.top/2018/06/12/第一个win32汇编程序/</id>
    <published>2018-06-12T11:58:55.000Z</published>
    <updated>2018-06-22T13:01:28.665Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Win32编程"><a href="#Win32编程" class="headerlink" title="Win32编程"></a>Win32编程</h1><p><code>This is code</code></p><p>;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>        .386<br>        .model flat,stdcall<br>        option casemap:none<br>;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>;文件定义<br>;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>include        windows.inc<br>include     user32.inc<br>includelib     user32.lib<br>include     kernel32.inc<br>includelib    kernel32.lib<br>;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>;数据段<br>        .data<br>szCaption    db    ‘来自酒猫’,0<br>szText        db    ‘Hello World’,0<br>szText_OK    db    ‘您刚点了OK按钮’<br>szCANCEL    db    ‘您刚点了CANCEL按钮’</p><p>;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>;代码段<br>;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>        .code<br>start:<br>        invoke    MessageBox,NULL,offset szCaption,MB_OKCANCEL or<br>        MB_INCONQUESTION<br>        cmp eax, IDOK<br>        je OK<br>        invoke    MessageBox,NULL,offset szCANCEL,offset szCaption,MB_OK<br>        jmp GO<br>OK:        invoke    MessageBox,NULL,offset szOK,offset szCaption,MB_OK<br>GO:        invoke    ExitProcess,NILL<br>;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>        end start<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Makefile</span><br><span class="line">-------</span><br></pre></td></tr></table></figure></p><p>EXE = hello.exe        #指定输出文件<br>OBJS = hello.obj        #需要的目标文件<br>RES = Fishc.res        #需要的资源文件</p><p>LINK_FLAG = /subsystem:windows    #连接选项<br>ML_FLAG = /c /coff        #编译选项</p><p>$(EXE): $(OBJS) $(RES)<br>    Link $(LINK_FLAG) $(OBJS) $(RES)</p><p>.asm.obj:<br>    ml $(ML_FLAG) $&lt;<br>.rc.res:<br>    rc $&lt;</p><p>clean:<br>    del <em>.obj<br>    del </em>.res</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>删除所有分区共享批处理</title>
    <link href="http://9cat.top/2018/05/28/%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E5%88%86%E5%8C%BA%E5%85%B1%E4%BA%AB/"/>
    <id>http://9cat.top/2018/05/28/删除所有分区共享/</id>
    <published>2018-05-28T11:58:55.000Z</published>
    <updated>2018-06-21T00:02:50.760Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="删除所有分区共享"><a href="#删除所有分区共享" class="headerlink" title="删除所有分区共享"></a>删除所有分区共享</h1><ul><li>先列举存在的分区，然后再逐个删除以分区命名的共享；</li><li>通过修改注册表防止admin$共享在下次开机时重新加载；</li><li>IPC$共享需要administritor权限才能删除</li></ul><p><code>This is code</code></p><pre><code>@echo offtitle 默认共享删除器echo.echo ----------------------------------------------echo.echo 开始删除每个分区下的默认共享echo.for %%a in (C D E F G H I J K L M N O P Q R S T U V W X Y Z) do @(    if exist %%a:\nul (        net share %%a$ /delete&gt;nul 2&gt;nul &amp;&amp; echo 成功删除名为 %%a$的默认共享 || echo 名为 %%a$的默认共享不存在        ))net share admin$ /delete&gt;nul 2&gt;nul &amp;&amp; echo 成功删除名为 admin$的默认共享 || echo 名为 admin$的默认共享不存在echo.echo ----------------------------------------------echo.net stop Server&gt;nul 2&gt;nul &amp;&amp; echo Server服务已停止net start Server&gt;nul 2&gt;nul &amp;&amp; echo Server服务已启动echo.echo ----------------------------------------------echo.echo 修改注册表以更改系统默认设置echo.echo 正在创建注册表文件echo Windows Registry Editor Version 5.00&gt; c:\delshare.reg:: 通过修改注册表禁止admin$共享，以防重启后再次加载echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\lanmanserver\parameters]&gt;&gt;c:\delshare.regecho &quot;AutoShareWks&quot;=dword:00000000&gt;&gt; c:\delshare.regecho &quot;AutoShareServer&quot;=dword:00000000&gt;&gt; c:\delshare.reg::删除IPC$共享，本功能需要administrator权限才能成功删除echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa]&gt;&gt; c:delshare.regecho &quot;restrictanonymous&quot;=dword:00000001&gt;&gt; c:\delshare.regecho 正在导入注册表以更改系统默认设置regedit /s c:\delshare.regdel c:\delshare.reg &amp;&amp; echo 临时文件已经删除echo.echo ----------------------------------------------echo.echo 程序已经成功删除所有的默认共享echo.echo 按任意键退出...pause&gt;nul</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
</feed>
