<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2.1.3Winsock网络编程知识（下）]]></title>
    <url>%2F2018%2F07%2F01%2F2-1-3Winsock%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%8B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[！上接Winsock网络编程知识（上）！sockaddr结构体是为了保持各个特定协议之间的兼容性而设计的。为bind()函数指定的地址和端口时，向sockaddr_in结构体填充相应的内容，而调用函数时应该使用sockaddr结构体。在sockaddr_in结构体中，还有一个结构体in_addr，该结构体在winsock2.h中的定义如下:1234567struct in_addr&#123; union &#123; struct &#123; u_char s_bl,s_b2,s_b3,s_b4; &#125; S_un_b; struct &#123; u_short s_wl,s_w2; &#125; S_un_w; u_long S_addr; &#125;S_un;&#125;; 该结构体是一个共用体S_un，包含2个结构体变量和1u_long类型变量。一般使用的IP地址的数据类型是使用点分十进制表示的,而in_addr结构体中却没有提供用来保存点分十进制表示IP地址的数据类型，只是需要使用转换函数，把点分十进制表示的IP地址转换成in_addr结构体可以接受的类型。这里使用的转换函数是inet_addr(),该函数的定义如下：1unsigned long inet_addr(const char FAR *cp); 该函数是将点分十进制表示的IP地址转换成unsigned long类型的数值。该函数的参数cp是指向点分十进制IP地址的字符指针。同时该函数也是一个逆函数，是将unsigned long型的数值型IP地址转换成点分十进制的IP地址，该函数的定义如下：1char FAR * inet_ntoa(struct in_addr in); sockaddr_in结构体中的sin_port表示端口，这个端口需要使用大尾方式字节序存储（也称大端和小端，是两种不同的存储方式。）在intel X86架构下，数值存储方式默认W为小尾方式字节序，而TCP/IP的数值的存储方式都是大尾方式的字节序。为了实现方便的转换，winsock2.h中提供为了方便的函数，即htons()和htonl()两个函数，并且提供了他们的逆函数ntohs()和ntohl()。htons()和htonl()函数的定义分别如下：12u_short htons(u_short hostshort);u_long htonl(u_long hostlong); ntohs()和ntohl()函数的定义分别如下：12u_short ntohs(u_short netshort);u_long ntohl(u_long netlong); 这4个函数中，前两个函数是将主机字节序转换成网络字节序，后两个是将网络字节序转换成主机字节序。在有些架构系统下，主机字节序和网络字节序是相同的，那么转换函数不进行任何转换，但是为了代码的移植性，还是会进行转换函数的调用。具体的bind()函数的使用方法如下：12345678910//创建套接字SOCKET sListen = socket(PF_INEF, SOCK_STREAM, IPPROTO_TCP);//对sockaddr_in结构体填充地址、端口等信息struct sockaddr_in ServerAddr;ServerAddr.sin_family = AF_INEF;ServerAddr.sin_addr.S_un.S_addr = inet_addr("10.10.30.16");ServerAddr.sin_port = htons(1234);//绑定套接字与地址信息bind(sLisent, (SOCKADDR *)&amp;ServerAddr, sizeof(serverAddr)); PS:对于服务器的地址可以指定为INADDR_ANY宏，表示“任意地址”或者“所有地址”。当客户端发起连接时。服务器操作系统接收到客户端的连接，根据网络的配置情况会自动选择一个IP地址和客户端进行通信。当套接字与地址端口信息绑定后，就需要让端口进行监听，当端口进行监听状态以后就可以接受其他主机的连接了。监听端口和接受连接请求的函数分别为listen()和accept()。监听端口的函数定义如下：1int listen(SOCKET s, int backlog); 该函数有两个参数，第1个参数s是指定要监听的套接字描述符，第2个参数是backlog是允许进入请求连接队列的个数，backlog的最大值由系统指定，在winsock2.h中，其最大值由SOMAXCONN表示，该值的定义如下：1#define SOMAXCONN 0x7fffffff 接受连接请求的函数定义如下：1SOCKET accept(SOCKET s,struct sockaddr FAR *addr, int FAR *addrlen); 该函数从连接请求队列中获取连接信息，创建新的套接字描述符，获取客户端地址。新创建的套接字用于和客户端进行通信。该函数有3个参数，第1个参数s是处于监听套接字描述符，第2个参数addr是一个指向sockaddr结构体的指针，用来返回客户端的地址信息，第3个参数addrlen是一个指向int型的指针变量，用来传入sockaddr结构体的大小。上面介绍的是面向连接的服务器端的函数，完成了一系列服务器应有的基本动作，如下： 首先，bind()函数将套接字描述符与地址信息进行绑定； 其次，listen()函数将套接字描述符置于监听状态； 最后，accept()函数获取连接队列中的连接信息，创建新的套接字描述符，以便与客户端通信。面向连接的客户端只需要完成与服务器的连接这样一个动作就可以实现和服务器的通信了。创建套接字描述符后，使用connect()函数就可以完成与服务器的连接。connet函数的定义如下：1int connet(SOCKES s, const struct sockaddr FAR *name,int namelen); 该函数的作用是将套接字进行连接。该函数有3个参数，第1个参数表示创建好的套接字描述符，第2个参数name是指向sockaddr结构体的指针，sockaddr结构体中保存了服务器的IP和端口号，第3个参数namelen是指定sockaddr结构体的长度。当客户端使用connect()函数与服务器连接后，客户端和服务器就可以通信了。通信时主要就是信息的发送和接收。这里介绍的函数有两个，分别是send()和recv()。发送函数send()的定义如下：1int recv(SOCKET s, const char FAR *buf, int len, int flags); 该函数有4个参数，第1个参数s是accept()函数返回的套接字描述符，第二个参数buf是发送消息的缓冲区，第3个参数len是缓冲区的长度，第4个参数flags通常赋值为0值。接收函数recv()的定义如下：1int recv(SOCKET s,char FAR *buf,int len, int flags); 该函数有4个参数，该函数的使用方法和send()函数的使用方法相同。这里不再介绍。 4.非面向连接协议的函数在面向连接的TCP协议中，服务器端将套接字描述符与地址进行绑定后，需要将端口进行监听，等待接受客户端的连接请求，而在客户端则需要连接服务器，完成这些步骤就可以保证面向连接的TCP协议的可靠传输，在调用connect()函数的过程中也完成了TCP的“三次握手”的过程。非面向连接的UDP协议在开发上基本与面向连接TCP相同。在非面向连接的UDP协议开发中服务器端不需要对端口进行监听，也就不需要等待接受客户端的连接请求，而客户端也不需要完成与服务器的连接。中间的“三次握手”过程也就省略了，这样UDP协议现对于TCP协议来讲就显得不可靠，但是效率会更高。（游戏方面一般采用DUP协议）在非面向连接协议开发中，服务器端不再调用listen()、accept()函数，客户端不再需要调用connect()函数。而服务器和客户端的通信换为sendto()和recvfrom()函数即可。sendto函数的定义如下：12345678int sendto( SOCKET s, const char FAR *buf, int len, int flags, const struct sockaddr FAR *to, int tolen); 该函数是用来在UDP协议通信双方进行发送数据的函数，该函数有6个参数，第1个参数s是套接字描述符，第2个参数buf是要发送数据的缓冲区，第3个参数len是指定第2个参数的长度，第4个参数通常赋0值，第5个参数to是一个指向sockaddr结构体的指针，这里给出接收信息的地址信息，第6个参数tolen是指定第5个参数的长度。recvfrom()函数的定义如下：12345678int recvfrom( SOCKET s, const char FAR *buf, int len, int flags, const struct sockaddr FAR *from, int FAR *fromlen); 该函数是用来在UDP协议通信双方进行接收数据的函数。该函数的用法与sendto()相同，这里不再介绍。PS：在缓冲区后设置数据的长度是为了防止缓冲区溢出！]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>Winsock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2.1.3Winsock网络编程知识（上）]]></title>
    <url>%2F2018%2F07%2F01%2F2-1-3Winsock%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%8A%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1.Winsock的初始化与释放在使用winsock相关函数时需要对Winsock库进行初始化，而在使用完后需要对Winsock库进行释放。 Winsock库的初始化函数的定义如下：1int WSAStartup(WORD wVersionRequested, LPWSADATA lpWSAData); 该函数的第1个参数wVersionRequested是需要初始化的Winsock库的版本号，Winsock库有多个版本号，目前常用的版本是2.2.第二个参数lpWSAData是一个指向WSADATA的指针。该函数的返回值为0，说明该函数调用成功。如果调用失败，则返回其他值。在程序的开始处调用该初始化函数，在程序中就可以使用Winsock相关的所有API函数。 Winsock库的释放函数的定义int WSACleanup(void);该函数没有参数，在程序的结束处直接调用该函数，即可释放Winsock库。 2.套接字的创建与关闭套接字用于根据指定的协议类型来分配一个套接字描述符。该描述符主要用在客户端和服务器端进行通信，当套接字使用完毕时应该关闭套接字以释放资源。创建套接字与关闭套接字的函数为socket()和closesocket()。 创建套接字的函数定义如下：1SOCKET socket(int af,int type, int protocol); socket()函数共有3个参数，第1个参数af用来指定地址族，在Windows下可以使用的参数有很多个，但是真正可以使用的只有两个，分别说AF_INET和PF_INET。这两个宏在Winsock2.h下的定义相同，分别如下：123456#define AF_INET 2 /* internetwork:UDP, TCP, etc. *//** Protocol families,same as address families for now*/#define PF_INEF AF_INEF 以上两个定义都摘自Winsock2.h头文件。从定义来看，PF_INEF和AF_INEF是相同的。看PF_INEF宏定义上面的注释，AF表示地址族（Address Family）,而PF表示协议族（Protocol Family）。对于Windows来说，两者相同；对于Unix/Linux来说，两者是不同的。一般情况下，调用socket()函数时应使用PF_INEF，而在设置地址时使用AF_INEF。sock()函数的第2个参数type是指定新套接字描述符的类型。这里可以使用的值通常有3个，分别是SOCK_STREAM、SOCK_DGRAM和SOCK_RAW，分别表示流套接字、数据包套接字和原始协议接口。socket()函数的第3个参数Protocol用来指定程序所使用的通信协议，这里可以选择使用IPPROTO_TCP、IPPROTO_UDP、IPPROTO_ICMP等协议，这个参数的值是根据第2个参数的值进行选择。第2个参数如果使用SOCK_STREAM，那么第3个参数应该使用IPPROTO_TCP；如果第2个参数使用SOCK_DGRAM，那么第3个参数应该使用IPPROTO_UDP。也就是说，如果第2个参数是SOCK_STREAM或SOCK_DGRAM，那么第3个参数可以默认为0.如果第2个参数指定的是SOCK_RAW，那么第3个参数必须指定，而不能使用0值。socket()函数调用成功返回值为一个新的套接字描述符，如果调用失败，则返回INVALID_SOCKET。调用失败后，想要知道原因，那么紧接着调用WSAGetLastError()函数得到错误码。PS：所有的Winsock函数出错后都可以调用WSAGetLastError()得到错误码。 关闭套接字的函数定义如下：1int closesocket(SOCKET s); closesocket()函数是socket()函数创建的套接字描述符。PS：对于WSAStartup()/WSACleanup()和socket()/closesocket()这样的函数，最好保持成对出现。也就是说，在写完一个函数时，立刻写出另外一个函数的调用，以免忘记资源的释放。 3.面向连接协议的函数前面的部分提到了面向连接协议与非面向连接协议所用到的函数是不相同的。这里来介绍面向连接的函数：bind()、listen()、accept()、send()和recv()。这些函数是常用的面向连接的函数，只是一个基础。Winsock库的函数非常多，这里只是寥寥几个而已，下面介绍函数的使用方法。通过socket()函数可以直接创建一个新的套接字描述符，但是它只是一个描述符，为网络的一些资源做准备。要想真正在网络上进行通信，需要本地的地址与本地的端口号信息。当然，本地的地址与端口号信息需要和套接字描述符进行关联，进行绑定。在Winsock函数中，使用bind()函数完成套接字与地址端口信息的绑定。bind()函数的定义如下：1int bind(SOCKET s, const struct sockaddr FAR *name, int namelen); 该函数有3个参数，第1个参数s是新创建的套接字描述符，也就是用socket()函数创建的描述符，第2个参数name是一个sockaddr的结构体，提供套接字一个地址和端口信息，第3个参数namelen是sockaddr结构体的大小。其中第二个参数sockaddr结构体的定义如下：1234struct sockaddr&#123; u_short sa_family； /* address family */ char sa_data[14]; /* up to 14 bytes of direct address */&#125;； 该结构体共有16个字节，在该结构体之前所使用的协议为sockadd_in，该结构体的定义如下:123456struct sockadd_in&#123;short sin_family;u_short sin_port;struct in_add sin_addr;char sin_size[8];&#125;; ！未完待续！]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>Winsock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2.1.2面向与非面连接协议所使用的函数]]></title>
    <url>%2F2018%2F07%2F01%2F2-1-2%E9%9D%A2%E5%90%91%E4%B8%8E%E9%9D%9E%E9%9D%A2%E8%BF%9E%E6%8E%A5%E5%8D%8F%E8%AE%AE%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[1.面向连接的协议在面向连接的协议中，两台计算机之间在进行数据收发前，必须先在两者之间建立一个通信通道，以确保两台计算机之间存在一条路径可以相互沟通。在数据传输完毕之后，切断这条通信通道。该种方式相当于打电话。面向连接的协议使用的是TCP协议，服务器与客户端建立通信信道所需要的基本Winsock函数如下： 服务器端函数：socket()-&gt;bind-&gt;listen()-&gt;accept()-&gt;send()/recv()-&gt;closesocket() 客户端函数：socket()-&gt;connet()-&gt;send()/recv()-&gt;closesocket() 2.非面向连接的协议在非面向连接的协议中，发送端只要直接将要发送的数据传出即可，不需要理会接送方是否能够接收到数据。而接受端在接受数据时，也不会响应消息通知发送给发送端。该种方式相当于写信，将写好的信放到信箱中，但是却不能保证收信人真的能够收到这封信。非面向连接使用的是UDP协议，服务器与客户端通信所需要的基本Winsock函数如下： 服务器端函数：socket()-&gt;bind-&gt;sendto()/recvfrom()-&gt;closesocket() 客户端函数：socket()-&gt;sendto()/recvfrom()-&gt;closesocket()]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2.1.1网络基础知识]]></title>
    <url>%2F2018%2F07%2F01%2F2.1.1%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[各种计算机之间通过互联网进行通信主要依靠TCP/IP协议。该协议分为4层，由上到下分别为应用层、传输层、网际层和链路层。TCP/IP协议总是下层为上层协议服务，下层协议的细节对上层协议来说是透明的。TCP/IP协议在每层协议中都定义了非常多的不同的协议，比如网际层的ICMP协议、IGMP协议，传输层的TCP协议、UDP协议等。在众多协议中，最具有代表性的是TCP/IP协议。 IP协议是“Internet Protocol”的简称，它是计算机网络相互连接进行通信而设计的协议。在IP协议中最重要的就是IP地址，IP地址是用来在网络上唯一标识一台计算机主机的地址。互联网中没有两个机器有相同的IP地址，因此它是用来标识一台网络主机的。所有的IP地址都是32位长，它用点分十进制表示，比如“10.10.30.16”。IP地址指定的不是主机，而是网络接口设备。因此，一台主机有两个网络接口，那么就会有两个IP地址。通常情况下，对于一台普通主机只有一个网络接口设备，也就只有一个IP地址。比如：个人使用的PC通常只有一个IP地址；而对于服务器来说，则会有多个网络接口设备，每个网络接口设备都有一个IP地址，比如WEB服务器可能就会有多个IP地址。 IP地址被分为5类，分别是A类、B类、C类、D类和E类。各类IP地址范围如下所示。 传输层有两大协议，分别是TCP协议和UDP协议。TCP协议是“Transmission Control Protocol”的简称，其意思是传输层控制协议。TCP协议是一种面向连接的、可靠的通信协议。TCP协议是IP协议的上层协议，IP协议服务于TCP协议。UDP协议是“User Datagram Protocol”的简称，其意思为用户包协议。UDP协议是一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。传输层是为应用层提供服务的，应用层的协议一部分是基于TCP协议的，比如FTP、HTTP。而一部分是基于UDP的，比如DNS协议。IP层提供了IP地址用来标识网络主机，而传输层提供端口来标识主机中的进程。确定了IP地址和端口号，就确定了网络上的主机以主机上通信的进程。传输层提供了标识通信进程的端口号。按照协议划分，端口号分为TCP端口和UDP端口，TCP端口和UDP端口各有65536个。对于应用程序而言，一般使用大于1024的端口号，因为小于1024的端口属于保留端口。Internet上的很多服务都是用小于1024的端口号。为避免冲突，程序员自己编写的应用程序不要使用小于1024的端口号。同一协议的端口不能冲突，比如Web服务器占用主机TCP协议的80端口，那么另外的程序就不可以再使用TCP协议的80端口。常见的端口号如下图所示。除了小于1024端口号外，还有一些比较有名的端口号，比如MY SQL Server的端口号是1433，Windows的远程桌面端口号是3389等。程序员在编写自己的网络应用程序时，要避免与这些常用端口冲突。]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大O记法]]></title>
    <url>%2F2018%2F07%2F01%2F%E5%A4%A7O%E8%AE%B0%E6%B3%95%2F</url>
    <content type="text"><![CDATA[大O记法C++的大O记法是算法的时间复杂度表达公式。简单的说大O记法可以告诉你一个算法耗费的时间长度同算法所处理的数据量大小的关系。大O记法只是一个概念性的或定性的记号，不能通过它来真正计算一个算法所耗费的精确时长。O(1) 算法只花费一个单位时间长度的时间。同所处理的数据量大小没有关系（常量时间）。“一个单位时间长度”没有定义为1秒，1天，还是1微妙，完全随意指定。大约同处理一个数据项的时长相同。考虑一个数组，按照数组下标的到一个元素的引用int arr[100];int x = arr[88]; //这个算法就是O(1)的O(1)是最爽的，哪怕有1亿条数据还是1条数据，算法所费时间是常量。O(N) 算法只花费N个单位时间长度的时间。数据量大小同算法所花费时长成正比例考虑一个list链表list.remove( 88 ); //把第88个元素删除。这个算法就是O(N)的O(N)是最不爽的，假设有1亿条数据，算法就要花费1亿个时间单位的时长。O(logN) 算法只花费logN个单位时间长度的时间。logN是取对数，可以简单的理解为取以2为底数，N的对数。例如log65536=16 (因为2^16=65536)对数是把一个天文数字般的整数映射成一个小小的整数的数学工具。考虑一个已排序的数组，用“折半法”查找，算法的时间特性就是O(logN)的。O(log(一个亿))约等于19个单位时间的时长。O(logN)也不一定是以2为底的，也可能是以3为底的，这都无所谓。算法在应用于局部小数据量时，可能因为内存的申请，释放，初始化等原因，观察者发现不符合大O记法表示的特性。但是在长期的运行，经过大数据量的考验后，那些干扰因素逐渐沦为次要因素，观察者可以发现算法的却符合某种自己固有的时间特性。]]></content>
      <tags>
        <tag>算法和数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TCP/IP调试工具]]></title>
    <url>%2F2018%2F06%2F24%2FIP%2F</url>
    <content type="text"><![CDATA[dos下的一些命令netstat -s -p tcp/udp/icmp/ip ping -l 65500 -t 192.168.1.1 #死亡之ping for /L %i IN (1,1,254) DO ping -w 2 -n 1 192.168.1.%i #批处理ping for /L %i IN (1,1,254) DO ping -w 2 -n 1 192.168.2.%i nbtstat -a 192.168.1.106 探测主机名 add portopening protocol =all port=135 name=关闭135端口 mode=enable SCOP=Subnet netsh advfirewall firewall add portopening protocol =tcp port=55555 name重要服务 mode=enable delete portopening protocol =tcp port=55555 interface=重要服务 delete portopening TCP 135]]></content>
  </entry>
  <entry>
    <title><![CDATA[vim]]></title>
    <url>%2F2018%2F06%2F24%2Fvim%2F</url>
    <content type="text"><![CDATA[vim命令行模式，插入模式，末行模式命令模式，不能输入字符移动命令：j 向下移动光标k 向上移动光标h 向左移动光标l 向右移动光标gg 文件顶部G 文件末尾数字gg 移动到数字对应行数字G 移动到数字对应行[ 移动到段落首] 移动到段落尾 Ctrl+b 向上翻页Ctrl+f 向下翻页H 屏幕顶部M 屏幕中间L 屏幕顶部 按i进入插入模式，可输入任意字符按ESC退出插入模式按：进入末行模式 撤销和取消撤销u ctrl+r 删除xn+x （n为数字） 删除N个字符dd 删除光标所在行D 一直删除至行尾dw 删除选中之后直到空格d+数字G 删除选中行到指定行 可视模式按v：可视模式，可选中代码按V：行Ctrl+v：块（可结合移动命令，例如：v+gg） 复制粘贴命令：yy:复制整行代码p:粘贴yy19p 复制19行]]></content>
  </entry>
  <entry>
    <title><![CDATA[memory]]></title>
    <url>%2F2018%2F06%2F24%2Fmemory%2F</url>
    <content type="text"><![CDATA[在C语言中，与其他编译语言一样，编译代码放入text段，而变量驻留在其他段中。究竟是哪个存储器变量取决于变量如何定义。定义在所有函数之外的变量被认为是全局变量。在任何变量前增加关键字static都会使该变量成为静态变量。如果使用数据将静态变量或全局变量初始化了，它们就会存储在data内存段中，否则，这些变量就会存储在bss内存段中。首先，必须使用用户名为malloc()的内存分配函数对对堆内存段中的内存进行分配。通常使用指针来引用堆中的内存。最后，其余的函数变量存储在堆栈内存中。因为堆栈可以包含许多不同的栈帧，所以栈帧变量可以在不同的函数上下文内保持唯一。 12345678910111213141516171819202122232425262728293031#include &lt;stdio.h&gt;int global_var;int global_initialized_var=5;void function()&#123; int stack_var; printf("the function's stack_var is at addres 0x%08x\n",&amp;stack_var);&#125;int main()&#123; int stack_var; static int static_initialized_var=5; static int static_var; int *heap_var_ptr; heap_var_ptr=(int *)malloc(4); printf("global_initialized_var is at addres 0x%08x\n",&amp;global_initialized_var); printf("static_initialized_var is at addres 0x%08x\n\n",&amp;static_initialized_var); printf("static_var is at addres 0x%08x\n",&amp;static_var); printf("global_var is at addres 0x%08x\n\n",&amp;global_var); printf("heap_var is at addres 0x%08x\n\n",heap_var_ptr); printf("static_var is addres 0x%08x\n",&amp;stack_var); function();&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[多线程编程基础]]></title>
    <url>%2F2018%2F06%2F20%2F%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021#include &lt;windows.h&gt;#include &lt;stdio.h&gt;DWORD WINAPI ThreadProc(LPVOID lpParam)&#123; printf("ThreadProc \r\n"); return 0;&#125;int main()&#123; HANDLE hThread = CreateThread(NULL,0,ThreadProc,NULL,0,NULL); WaitForSingleObject(hThread, INFINITE); printf("main \r\n"); CloseHandle(hThread); return 0;&#125;]]></content>
      <tags>
        <tag>programme</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一个win32汇编程序]]></title>
    <url>%2F2018%2F06%2F12%2F%E7%AC%AC%E4%B8%80%E4%B8%AAwin32%E6%B1%87%E7%BC%96%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[Win32编程This is code ;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; .386 .model flat,stdcall option casemap:none;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;;文件定义;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;include windows.incinclude user32.incincludelib user32.libinclude kernel32.incincludelib kernel32.lib;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;;数据段 .dataszCaption db ‘来自酒猫’,0szText db ‘Hello World’,0szText_OK db ‘您刚点了OK按钮’szCANCEL db ‘您刚点了CANCEL按钮’ ;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;;代码段;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; .codestart: invoke MessageBox,NULL,offset szCaption,MB_OKCANCEL or MB_INCONQUESTION cmp eax, IDOK je OK invoke MessageBox,NULL,offset szCANCEL,offset szCaption,MB_OK jmp GOOK: invoke MessageBox,NULL,offset szOK,offset szCaption,MB_OKGO: invoke ExitProcess,NILL;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; end start12Makefile------- EXE = hello.exe #指定输出文件OBJS = hello.obj #需要的目标文件RES = Fishc.res #需要的资源文件 LINK_FLAG = /subsystem:windows #连接选项ML_FLAG = /c /coff #编译选项 $(EXE): $(OBJS) $(RES) Link $(LINK_FLAG) $(OBJS) $(RES) .asm.obj: ml $(ML_FLAG) $&lt;.rc.res: rc $&lt; clean: del .obj del .res]]></content>
  </entry>
  <entry>
    <title><![CDATA[删除所有分区共享批处理]]></title>
    <url>%2F2018%2F05%2F28%2F%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E5%88%86%E5%8C%BA%E5%85%B1%E4%BA%AB%2F</url>
    <content type="text"><![CDATA[删除所有分区共享 先列举存在的分区，然后再逐个删除以分区命名的共享； 通过修改注册表防止admin$共享在下次开机时重新加载； IPC$共享需要administritor权限才能删除 This is code @echo off title 默认共享删除器 echo. echo ---------------------------------------------- echo. echo 开始删除每个分区下的默认共享 echo. for %%a in (C D E F G H I J K L M N O P Q R S T U V W X Y Z) do @( if exist %%a:\nul ( net share %%a$ /delete&gt;nul 2&gt;nul &amp;&amp; echo 成功删除名为 %%a$的默认共享 || echo 名为 %%a$的默认共享不存在 ) ) net share admin$ /delete&gt;nul 2&gt;nul &amp;&amp; echo 成功删除名为 admin$的默认共享 || echo 名为 admin$的默认共享不存在 echo. echo ---------------------------------------------- echo. net stop Server&gt;nul 2&gt;nul &amp;&amp; echo Server服务已停止 net start Server&gt;nul 2&gt;nul &amp;&amp; echo Server服务已启动 echo. echo ---------------------------------------------- echo. echo 修改注册表以更改系统默认设置 echo. echo 正在创建注册表文件 echo Windows Registry Editor Version 5.00&gt; c:\delshare.reg :: 通过修改注册表禁止admin$共享，以防重启后再次加载 echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\lanmanserver\parameters]&gt;&gt;c:\delshare.reg echo &quot;AutoShareWks&quot;=dword:00000000&gt;&gt; c:\delshare.reg echo &quot;AutoShareServer&quot;=dword:00000000&gt;&gt; c:\delshare.reg ::删除IPC$共享，本功能需要administrator权限才能成功删除 echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa]&gt;&gt; c:delshare.reg echo &quot;restrictanonymous&quot;=dword:00000001&gt;&gt; c:\delshare.reg echo 正在导入注册表以更改系统默认设置 regedit /s c:\delshare.reg del c:\delshare.reg &amp;&amp; echo 临时文件已经删除 echo. echo ---------------------------------------------- echo. echo 程序已经成功删除所有的默认共享 echo. echo 按任意键退出... pause&gt;nul]]></content>
  </entry>
</search>
